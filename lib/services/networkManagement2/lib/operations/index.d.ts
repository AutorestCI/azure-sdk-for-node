/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * ApplicationGateways
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface ApplicationGateways {

    /**
     * Deletes the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, applicationGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, applicationGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGateway>): void;
    get(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<models.ApplicationGateway>): void;

    /**
     * Creates or updates the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * application gateway operation.
     *
     * @param {object} [parameters.sku] SKU of the application gateway resource.
     *
     * @param {string} [parameters.sku.name] Name of an application gateway SKU.
     * Possible values are: 'Standard_Small', 'Standard_Medium', 'Standard_Large',
     * 'WAF_Medium', and 'WAF_Large'. Possible values include: 'Standard_Small',
     * 'Standard_Medium', 'Standard_Large', 'WAF_Medium', 'WAF_Large'
     *
     * @param {string} [parameters.sku.tier] Tier of an application gateway.
     * Possible values are: 'Standard' and 'WAF'. Possible values include:
     * 'Standard', 'WAF'
     *
     * @param {number} [parameters.sku.capacity] Capacity (instance count) of an
     * application gateway.
     *
     * @param {object} [parameters.sslPolicy] SSL policy of the application gateway
     * resource.
     *
     * @param {array} [parameters.sslPolicy.disabledSslProtocols] SSL protocols to
     * be disabled on application gateway. Possible values are: 'TLSv1_0',
     * 'TLSv1_1', and 'TLSv1_2'.
     *
     * @param {array} [parameters.gatewayIPConfigurations] Subnets of application
     * the gateway resource.
     *
     * @param {array} [parameters.authenticationCertificates] Authentication
     * certificates of the application gateway resource.
     *
     * @param {array} [parameters.sslCertificates] SSL certificates of the
     * application gateway resource.
     *
     * @param {array} [parameters.frontendIPConfigurations] Frontend IP addresses
     * of the application gateway resource.
     *
     * @param {array} [parameters.frontendPorts] Frontend ports of the application
     * gateway resource.
     *
     * @param {array} [parameters.probes] Probes of the application gateway
     * resource.
     *
     * @param {array} [parameters.backendAddressPools] Backend address pool of the
     * application gateway resource.
     *
     * @param {array} [parameters.backendHttpSettingsCollection] Backend http
     * settings of the application gateway resource.
     *
     * @param {array} [parameters.httpListeners] Http listeners of the application
     * gateway resource.
     *
     * @param {array} [parameters.urlPathMaps] URL path map of the application
     * gateway resource.
     *
     * @param {array} [parameters.requestRoutingRules] Request routing rules of the
     * application gateway resource.
     *
     * @param {object} [parameters.webApplicationFirewallConfiguration] Web
     * application firewall configuration.
     *
     * @param {boolean} parameters.webApplicationFirewallConfiguration.enabled
     * Whether the web application firewall is enabled.
     *
     * @param {string}
     * [parameters.webApplicationFirewallConfiguration.firewallMode] Web
     * application firewall mode. Possible values are: 'Detection' and
     * 'Prevention'. Possible values include: 'Detection', 'Prevention'
     *
     * @param {string} [parameters.resourceGuid] Resource GUID property of the
     * application gateway resource.
     *
     * @param {string} [parameters.provisioningState] Provisioning state of the
     * application gateway resource. Possible values are: 'Updating', 'Deleting',
     * and 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: models.ApplicationGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGateway>): void;
    createOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: models.ApplicationGateway, callback: ServiceCallback<models.ApplicationGateway>): void;

    /**
     * Lists all application gateways in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGatewayListResult>): void;
    list(resourceGroupName: string, callback: ServiceCallback<models.ApplicationGatewayListResult>): void;

    /**
     * Gets all the application gateways in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGatewayListResult>): void;
    listAll(callback: ServiceCallback<models.ApplicationGatewayListResult>): void;

    /**
     * Starts the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    start(resourceGroupName: string, applicationGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    start(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<void>): void;

    /**
     * Stops the specified application gateway in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    stop(resourceGroupName: string, applicationGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    stop(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the backend health of the specified application gateway in a resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands BackendAddressPool and
     * BackendHttpSettings referenced in backend health.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    backendHealth(resourceGroupName: string, applicationGatewayName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGatewayBackendHealth>): void;
    backendHealth(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<models.ApplicationGatewayBackendHealth>): void;

    /**
     * Deletes the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, applicationGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<void>): void;

    /**
     * Creates or updates the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * application gateway operation.
     *
     * @param {object} [parameters.sku] SKU of the application gateway resource.
     *
     * @param {string} [parameters.sku.name] Name of an application gateway SKU.
     * Possible values are: 'Standard_Small', 'Standard_Medium', 'Standard_Large',
     * 'WAF_Medium', and 'WAF_Large'. Possible values include: 'Standard_Small',
     * 'Standard_Medium', 'Standard_Large', 'WAF_Medium', 'WAF_Large'
     *
     * @param {string} [parameters.sku.tier] Tier of an application gateway.
     * Possible values are: 'Standard' and 'WAF'. Possible values include:
     * 'Standard', 'WAF'
     *
     * @param {number} [parameters.sku.capacity] Capacity (instance count) of an
     * application gateway.
     *
     * @param {object} [parameters.sslPolicy] SSL policy of the application gateway
     * resource.
     *
     * @param {array} [parameters.sslPolicy.disabledSslProtocols] SSL protocols to
     * be disabled on application gateway. Possible values are: 'TLSv1_0',
     * 'TLSv1_1', and 'TLSv1_2'.
     *
     * @param {array} [parameters.gatewayIPConfigurations] Subnets of application
     * the gateway resource.
     *
     * @param {array} [parameters.authenticationCertificates] Authentication
     * certificates of the application gateway resource.
     *
     * @param {array} [parameters.sslCertificates] SSL certificates of the
     * application gateway resource.
     *
     * @param {array} [parameters.frontendIPConfigurations] Frontend IP addresses
     * of the application gateway resource.
     *
     * @param {array} [parameters.frontendPorts] Frontend ports of the application
     * gateway resource.
     *
     * @param {array} [parameters.probes] Probes of the application gateway
     * resource.
     *
     * @param {array} [parameters.backendAddressPools] Backend address pool of the
     * application gateway resource.
     *
     * @param {array} [parameters.backendHttpSettingsCollection] Backend http
     * settings of the application gateway resource.
     *
     * @param {array} [parameters.httpListeners] Http listeners of the application
     * gateway resource.
     *
     * @param {array} [parameters.urlPathMaps] URL path map of the application
     * gateway resource.
     *
     * @param {array} [parameters.requestRoutingRules] Request routing rules of the
     * application gateway resource.
     *
     * @param {object} [parameters.webApplicationFirewallConfiguration] Web
     * application firewall configuration.
     *
     * @param {boolean} parameters.webApplicationFirewallConfiguration.enabled
     * Whether the web application firewall is enabled.
     *
     * @param {string}
     * [parameters.webApplicationFirewallConfiguration.firewallMode] Web
     * application firewall mode. Possible values are: 'Detection' and
     * 'Prevention'. Possible values include: 'Detection', 'Prevention'
     *
     * @param {string} [parameters.resourceGuid] Resource GUID property of the
     * application gateway resource.
     *
     * @param {string} [parameters.provisioningState] Provisioning state of the
     * application gateway resource. Possible values are: 'Updating', 'Deleting',
     * and 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: models.ApplicationGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGateway>): void;
    beginCreateOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: models.ApplicationGateway, callback: ServiceCallback<models.ApplicationGateway>): void;

    /**
     * Starts the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginStart(resourceGroupName: string, applicationGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginStart(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<void>): void;

    /**
     * Stops the specified application gateway in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginStop(resourceGroupName: string, applicationGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginStop(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the backend health of the specified application gateway in a resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands BackendAddressPool and
     * BackendHttpSettings referenced in backend health.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginBackendHealth(resourceGroupName: string, applicationGatewayName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGatewayBackendHealth>): void;
    beginBackendHealth(resourceGroupName: string, applicationGatewayName: string, callback: ServiceCallback<models.ApplicationGatewayBackendHealth>): void;

    /**
     * Lists all application gateways in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGatewayListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ApplicationGatewayListResult>): void;

    /**
     * Gets all the application gateways in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationGatewayListResult>): void;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.ApplicationGatewayListResult>): void;
}

/**
 * @class
 * RouteTables
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface RouteTables {

    /**
     * Deletes the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, routeTableName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, routeTableName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, routeTableName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteTable>): void;
    get(resourceGroupName: string, routeTableName: string, callback: ServiceCallback<models.RouteTable>): void;

    /**
     * Create or updates a route table in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} parameters Parameters supplied to the create or update route
     * table operation.
     *
     * @param {array} [parameters.routes] Collection of routes contained within a
     * route table.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, routeTableName: string, parameters: models.RouteTable, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteTable>): void;
    createOrUpdate(resourceGroupName: string, routeTableName: string, parameters: models.RouteTable, callback: ServiceCallback<models.RouteTable>): void;

    /**
     * Gets all route tables in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteTableListResult>): void;
    list(resourceGroupName: string, callback: ServiceCallback<models.RouteTableListResult>): void;

    /**
     * Gets all route tables in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteTableListResult>): void;
    listAll(callback: ServiceCallback<models.RouteTableListResult>): void;

    /**
     * Deletes the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, routeTableName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, routeTableName: string, callback: ServiceCallback<void>): void;

    /**
     * Create or updates a route table in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} parameters Parameters supplied to the create or update route
     * table operation.
     *
     * @param {array} [parameters.routes] Collection of routes contained within a
     * route table.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, routeTableName: string, parameters: models.RouteTable, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteTable>): void;
    beginCreateOrUpdate(resourceGroupName: string, routeTableName: string, parameters: models.RouteTable, callback: ServiceCallback<models.RouteTable>): void;

    /**
     * Gets all route tables in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteTableListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.RouteTableListResult>): void;

    /**
     * Gets all route tables in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteTableListResult>): void;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.RouteTableListResult>): void;
}

/**
 * @class
 * Routes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface Routes {

    /**
     * Deletes the specified route from a route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, routeTableName: string, routeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, routeTableName: string, routeName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the specified route from a route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, routeTableName: string, routeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Route>): void;
    get(resourceGroupName: string, routeTableName: string, routeName: string, callback: ServiceCallback<models.Route>): void;

    /**
     * Creates or updates a route in the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {object} routeParameters Parameters supplied to the create or update
     * route operation.
     *
     * @param {string} [routeParameters.addressPrefix] The destination CIDR to
     * which the route applies.
     *
     * @param {string} routeParameters.nextHopType The type of Azure hop the packet
     * should be sent to. Possible values are: 'VirtualNetworkGateway',
     * 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible values
     * include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet',
     * 'VirtualAppliance', 'None'
     *
     * @param {string} [routeParameters.nextHopIpAddress] The IP address packets
     * should be forwarded to. Next hop values are only allowed in routes where the
     * next hop type is VirtualAppliance.
     *
     * @param {string} [routeParameters.provisioningState] The provisioning state
     * of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [routeParameters.name] The name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [routeParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [routeParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, routeTableName: string, routeName: string, routeParameters: models.Route, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Route>): void;
    createOrUpdate(resourceGroupName: string, routeTableName: string, routeName: string, routeParameters: models.Route, callback: ServiceCallback<models.Route>): void;

    /**
     * Gets all routes in a route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, routeTableName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteListResult>): void;
    list(resourceGroupName: string, routeTableName: string, callback: ServiceCallback<models.RouteListResult>): void;

    /**
     * Deletes the specified route from a route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, routeTableName: string, routeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, routeTableName: string, routeName: string, callback: ServiceCallback<void>): void;

    /**
     * Creates or updates a route in the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {object} routeParameters Parameters supplied to the create or update
     * route operation.
     *
     * @param {string} [routeParameters.addressPrefix] The destination CIDR to
     * which the route applies.
     *
     * @param {string} routeParameters.nextHopType The type of Azure hop the packet
     * should be sent to. Possible values are: 'VirtualNetworkGateway',
     * 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible values
     * include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet',
     * 'VirtualAppliance', 'None'
     *
     * @param {string} [routeParameters.nextHopIpAddress] The IP address packets
     * should be forwarded to. Next hop values are only allowed in routes where the
     * next hop type is VirtualAppliance.
     *
     * @param {string} [routeParameters.provisioningState] The provisioning state
     * of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [routeParameters.name] The name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [routeParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [routeParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, routeTableName: string, routeName: string, routeParameters: models.Route, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Route>): void;
    beginCreateOrUpdate(resourceGroupName: string, routeTableName: string, routeName: string, routeParameters: models.Route, callback: ServiceCallback<models.Route>): void;

    /**
     * Gets all routes in a route table.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.RouteListResult>): void;
}

/**
 * @class
 * PublicIPAddresses
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface PublicIPAddresses {

    /**
     * Deletes the specified public IP address.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, publicIpAddressName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, publicIpAddressName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the specified public IP address in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, publicIpAddressName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddress>): void;
    get(resourceGroupName: string, publicIpAddressName: string, callback: ServiceCallback<models.PublicIPAddress>): void;

    /**
     * Creates or updates a static or dynamic public IP address.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the public IP address.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * public IP address operation.
     *
     * @param {string} [parameters.publicIPAllocationMethod] The public IP
     * allocation method. Possible values are: 'Static' and 'Dynamic'. Possible
     * values include: 'Static', 'Dynamic'
     *
     * @param {string} [parameters.publicIPAddressVersion] The public IP address
     * version. Possible values are: 'IPv4' and 'IPv6'. Possible values include:
     * 'IPv4', 'IPv6'
     *
     * @param {object} [parameters.dnsSettings] The FQDN of the DNS record
     * associated with the public IP address.
     *
     * @param {string} [parameters.dnsSettings.domainNameLabel] Gets or sets the
     * Domain name label.The concatenation of the domain name label and the
     * regionalized DNS zone make up the fully qualified domain name associated
     * with the public IP address. If a domain name label is specified, an A DNS
     * record is created for the public IP in the Microsoft Azure DNS system.
     *
     * @param {string} [parameters.dnsSettings.fqdn] Gets the FQDN, Fully qualified
     * domain name of the A DNS record associated with the public IP. This is the
     * concatenation of the domainNameLabel and the regionalized DNS zone.
     *
     * @param {string} [parameters.dnsSettings.reverseFqdn] Gets or Sets the
     * Reverse FQDN. A user-visible, fully qualified domain name that resolves to
     * this public IP address. If the reverseFqdn is specified, then a PTR DNS
     * record is created pointing from the IP address in the in-addr.arpa domain to
     * the reverse FQDN.
     *
     * @param {string} [parameters.ipAddress]
     *
     * @param {number} [parameters.idleTimeoutInMinutes] The idle timeout of the
     * public IP address.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * public IP resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, publicIpAddressName: string, parameters: models.PublicIPAddress, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddress>): void;
    createOrUpdate(resourceGroupName: string, publicIpAddressName: string, parameters: models.PublicIPAddress, callback: ServiceCallback<models.PublicIPAddress>): void;

    /**
     * Gets all the public IP addresses in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddressListResult>): void;
    listAll(callback: ServiceCallback<models.PublicIPAddressListResult>): void;

    /**
     * Gets all public IP addresses in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddressListResult>): void;
    list(resourceGroupName: string, callback: ServiceCallback<models.PublicIPAddressListResult>): void;

    /**
     * Deletes the specified public IP address.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, publicIpAddressName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, publicIpAddressName: string, callback: ServiceCallback<void>): void;

    /**
     * Creates or updates a static or dynamic public IP address.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the public IP address.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * public IP address operation.
     *
     * @param {string} [parameters.publicIPAllocationMethod] The public IP
     * allocation method. Possible values are: 'Static' and 'Dynamic'. Possible
     * values include: 'Static', 'Dynamic'
     *
     * @param {string} [parameters.publicIPAddressVersion] The public IP address
     * version. Possible values are: 'IPv4' and 'IPv6'. Possible values include:
     * 'IPv4', 'IPv6'
     *
     * @param {object} [parameters.dnsSettings] The FQDN of the DNS record
     * associated with the public IP address.
     *
     * @param {string} [parameters.dnsSettings.domainNameLabel] Gets or sets the
     * Domain name label.The concatenation of the domain name label and the
     * regionalized DNS zone make up the fully qualified domain name associated
     * with the public IP address. If a domain name label is specified, an A DNS
     * record is created for the public IP in the Microsoft Azure DNS system.
     *
     * @param {string} [parameters.dnsSettings.fqdn] Gets the FQDN, Fully qualified
     * domain name of the A DNS record associated with the public IP. This is the
     * concatenation of the domainNameLabel and the regionalized DNS zone.
     *
     * @param {string} [parameters.dnsSettings.reverseFqdn] Gets or Sets the
     * Reverse FQDN. A user-visible, fully qualified domain name that resolves to
     * this public IP address. If the reverseFqdn is specified, then a PTR DNS
     * record is created pointing from the IP address in the in-addr.arpa domain to
     * the reverse FQDN.
     *
     * @param {string} [parameters.ipAddress]
     *
     * @param {number} [parameters.idleTimeoutInMinutes] The idle timeout of the
     * public IP address.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * public IP resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, publicIpAddressName: string, parameters: models.PublicIPAddress, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddress>): void;
    beginCreateOrUpdate(resourceGroupName: string, publicIpAddressName: string, parameters: models.PublicIPAddress, callback: ServiceCallback<models.PublicIPAddress>): void;

    /**
     * Gets all the public IP addresses in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddressListResult>): void;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.PublicIPAddressListResult>): void;

    /**
     * Gets all public IP addresses in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicIPAddressListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.PublicIPAddressListResult>): void;
}

/**
 * @class
 * NetworkSecurityGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface NetworkSecurityGroups {

    /**
     * Deletes the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, networkSecurityGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, networkSecurityGroupName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, networkSecurityGroupName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSecurityGroup>): void;
    get(resourceGroupName: string, networkSecurityGroupName: string, callback: ServiceCallback<models.NetworkSecurityGroup>): void;

    /**
     * Creates or updates a network security group in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * network security group operation.
     *
     * @param {array} [parameters.securityRules] A collection of security rules of
     * the network security group.
     *
     * @param {array} [parameters.defaultSecurityRules] The default security rules
     * of network security group.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * network security group resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.NetworkSecurityGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSecurityGroup>): void;
    createOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.NetworkSecurityGroup, callback: ServiceCallback<models.NetworkSecurityGroup>): void;

    /**
     * Gets all network security groups in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSecurityGroupListResult>): void;
    listAll(callback: ServiceCallback<models.NetworkSecurityGroupListResult>): void;

    /**
     * Gets all network security groups in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSecurityGroupListResult>): void;
    list(resourceGroupName: string, callback: ServiceCallback<models.NetworkSecurityGroupListResult>): void;

    /**
     * Deletes the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, networkSecurityGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, networkSecurityGroupName: string, callback: ServiceCallback<void>): void;

    /**
     * Creates or updates a network security group in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * network security group operation.
     *
     * @param {array} [parameters.securityRules] A collection of security rules of
     * the network security group.
     *
     * @param {array} [parameters.defaultSecurityRules] The default security rules
     * of network security group.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * network security group resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.NetworkSecurityGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSecurityGroup>): void;
    beginCreateOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, parameters: models.NetworkSecurityGroup, callback: ServiceCallback<models.NetworkSecurityGroup>): void;

    /**
     * Gets all network security groups in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSecurityGroupListResult>): void;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.NetworkSecurityGroupListResult>): void;

    /**
     * Gets all network security groups in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSecurityGroupListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.NetworkSecurityGroupListResult>): void;
}

/**
 * @class
 * SecurityRules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface SecurityRules {

    /**
     * Deletes the specified network security rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, callback: ServiceCallback<void>): void;

    /**
     * Get the specified network security rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityRule>): void;
    get(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, callback: ServiceCallback<models.SecurityRule>): void;

    /**
     * Creates or updates a security rule in the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {object} securityRuleParameters Parameters supplied to the create or
     * update network security rule operation.
     *
     * @param {string} [securityRuleParameters.description] A description for this
     * rule. Restricted to 140 chars.
     *
     * @param {string} securityRuleParameters.protocol Network protocol this rule
     * applies to. Possible values are 'Tcp', 'Udp', and '*'. Possible values
     * include: 'Tcp', 'Udp', '*'
     *
     * @param {string} [securityRuleParameters.sourcePortRange] The source port or
     * range. Integer or range between 0 and 65535. Asterix '*' can also be used to
     * match all ports.
     *
     * @param {string} [securityRuleParameters.destinationPortRange] The
     * destination port or range. Integer or range between 0 and 65535. Asterix '*'
     * can also be used to match all ports.
     *
     * @param {string} securityRuleParameters.sourceAddressPrefix The CIDR or
     * source IP range. Asterix '*' can also be used to match all source IPs.
     * Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
     * can also be used. If this is an ingress rule, specifies where network
     * traffic originates from.
     *
     * @param {string} securityRuleParameters.destinationAddressPrefix The
     * destination address prefix. CIDR or source IP range. Asterix '*' can also be
     * used to match all source IPs. Default tags such as 'VirtualNetwork',
     * 'AzureLoadBalancer' and 'Internet' can also be used.
     *
     * @param {string} securityRuleParameters.access The network traffic is allowed
     * or denied. Possible values are: 'Allow' and 'Deny'. Possible values include:
     * 'Allow', 'Deny'
     *
     * @param {number} [securityRuleParameters.priority] The priority of the rule.
     * The value can be between 100 and 4096. The priority number must be unique
     * for each rule in the collection. The lower the priority number, the higher
     * the priority of the rule.
     *
     * @param {string} securityRuleParameters.direction The direction of the rule.
     * The direction specifies if rule will be evaluated on incoming or outcoming
     * traffic. Possible values are: 'Inbound' and 'Outbound'. Possible values
     * include: 'Inbound', 'Outbound'
     *
     * @param {string} [securityRuleParameters.provisioningState] The provisioning
     * state of the public IP resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [securityRuleParameters.name] The name of the resource that
     * is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [securityRuleParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [securityRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, securityRuleParameters: models.SecurityRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityRule>): void;
    createOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, securityRuleParameters: models.SecurityRule, callback: ServiceCallback<models.SecurityRule>): void;

    /**
     * Gets all security rules in a network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, networkSecurityGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityRuleListResult>): void;
    list(resourceGroupName: string, networkSecurityGroupName: string, callback: ServiceCallback<models.SecurityRuleListResult>): void;

    /**
     * Deletes the specified network security rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, callback: ServiceCallback<void>): void;

    /**
     * Creates or updates a security rule in the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {object} securityRuleParameters Parameters supplied to the create or
     * update network security rule operation.
     *
     * @param {string} [securityRuleParameters.description] A description for this
     * rule. Restricted to 140 chars.
     *
     * @param {string} securityRuleParameters.protocol Network protocol this rule
     * applies to. Possible values are 'Tcp', 'Udp', and '*'. Possible values
     * include: 'Tcp', 'Udp', '*'
     *
     * @param {string} [securityRuleParameters.sourcePortRange] The source port or
     * range. Integer or range between 0 and 65535. Asterix '*' can also be used to
     * match all ports.
     *
     * @param {string} [securityRuleParameters.destinationPortRange] The
     * destination port or range. Integer or range between 0 and 65535. Asterix '*'
     * can also be used to match all ports.
     *
     * @param {string} securityRuleParameters.sourceAddressPrefix The CIDR or
     * source IP range. Asterix '*' can also be used to match all source IPs.
     * Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
     * can also be used. If this is an ingress rule, specifies where network
     * traffic originates from.
     *
     * @param {string} securityRuleParameters.destinationAddressPrefix The
     * destination address prefix. CIDR or source IP range. Asterix '*' can also be
     * used to match all source IPs. Default tags such as 'VirtualNetwork',
     * 'AzureLoadBalancer' and 'Internet' can also be used.
     *
     * @param {string} securityRuleParameters.access The network traffic is allowed
     * or denied. Possible values are: 'Allow' and 'Deny'. Possible values include:
     * 'Allow', 'Deny'
     *
     * @param {number} [securityRuleParameters.priority] The priority of the rule.
     * The value can be between 100 and 4096. The priority number must be unique
     * for each rule in the collection. The lower the priority number, the higher
     * the priority of the rule.
     *
     * @param {string} securityRuleParameters.direction The direction of the rule.
     * The direction specifies if rule will be evaluated on incoming or outcoming
     * traffic. Possible values are: 'Inbound' and 'Outbound'. Possible values
     * include: 'Inbound', 'Outbound'
     *
     * @param {string} [securityRuleParameters.provisioningState] The provisioning
     * state of the public IP resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [securityRuleParameters.name] The name of the resource that
     * is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [securityRuleParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [securityRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, securityRuleParameters: models.SecurityRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityRule>): void;
    beginCreateOrUpdate(resourceGroupName: string, networkSecurityGroupName: string, securityRuleName: string, securityRuleParameters: models.SecurityRule, callback: ServiceCallback<models.SecurityRule>): void;

    /**
     * Gets all security rules in a network security group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityRuleListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.SecurityRuleListResult>): void;
}

/**
 * @class
 * LoadBalancers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface LoadBalancers {

    /**
     * Deletes the specified load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, loadBalancerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, loadBalancerName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the specified load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, loadBalancerName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancer>): void;
    get(resourceGroupName: string, loadBalancerName: string, callback: ServiceCallback<models.LoadBalancer>): void;

    /**
     * Creates or updates a load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} parameters Parameters supplied to the create or update load
     * balancer operation.
     *
     * @param {array} [parameters.frontendIPConfigurations] Object representing the
     * frontend IPs to be used for the load balancer
     *
     * @param {array} [parameters.backendAddressPools] Collection of backend
     * address pools used by a load balancer
     *
     * @param {array} [parameters.loadBalancingRules] Object collection
     * representing the load balancing rules Gets the provisioning
     *
     * @param {array} [parameters.probes] Collection of probe objects used in the
     * load balancer
     *
     * @param {array} [parameters.inboundNatRules] Collection of inbound NAT Rules
     * used by a load balancer. Defining inbound NAT rules on your load balancer is
     * mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are
     * referenced from virtual machine scale sets. NICs that are associated with
     * individual virtual machines cannot reference an Inbound NAT pool. They have
     * to reference individual inbound NAT rules.
     *
     * @param {array} [parameters.inboundNatPools] Defines an external port range
     * for inbound NAT to a single backend port on NICs associated with a load
     * balancer. Inbound NAT rules are created automatically for each NIC
     * associated with the Load Balancer using an external port from this range.
     * Defining an Inbound NAT pool on your Load Balancer is mutually exclusive
     * with defining inbound Nat rules. Inbound NAT pools are referenced from
     * virtual machine scale sets. NICs that are associated with individual virtual
     * machines cannot reference an inbound NAT pool. They have to reference
     * individual inbound NAT rules.
     *
     * @param {array} [parameters.outboundNatRules] The outbound NAT rules.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * load balancer resource.
     *
     * @param {string} [parameters.provisioningState] Gets the provisioning state
     * of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, loadBalancerName: string, parameters: models.LoadBalancer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancer>): void;
    createOrUpdate(resourceGroupName: string, loadBalancerName: string, parameters: models.LoadBalancer, callback: ServiceCallback<models.LoadBalancer>): void;

    /**
     * Gets all the load balancers in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancerListResult>): void;
    listAll(callback: ServiceCallback<models.LoadBalancerListResult>): void;

    /**
     * Gets all the load balancers in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancerListResult>): void;
    list(resourceGroupName: string, callback: ServiceCallback<models.LoadBalancerListResult>): void;

    /**
     * Deletes the specified load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, loadBalancerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, loadBalancerName: string, callback: ServiceCallback<void>): void;

    /**
     * Creates or updates a load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {object} parameters Parameters supplied to the create or update load
     * balancer operation.
     *
     * @param {array} [parameters.frontendIPConfigurations] Object representing the
     * frontend IPs to be used for the load balancer
     *
     * @param {array} [parameters.backendAddressPools] Collection of backend
     * address pools used by a load balancer
     *
     * @param {array} [parameters.loadBalancingRules] Object collection
     * representing the load balancing rules Gets the provisioning
     *
     * @param {array} [parameters.probes] Collection of probe objects used in the
     * load balancer
     *
     * @param {array} [parameters.inboundNatRules] Collection of inbound NAT Rules
     * used by a load balancer. Defining inbound NAT rules on your load balancer is
     * mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are
     * referenced from virtual machine scale sets. NICs that are associated with
     * individual virtual machines cannot reference an Inbound NAT pool. They have
     * to reference individual inbound NAT rules.
     *
     * @param {array} [parameters.inboundNatPools] Defines an external port range
     * for inbound NAT to a single backend port on NICs associated with a load
     * balancer. Inbound NAT rules are created automatically for each NIC
     * associated with the Load Balancer using an external port from this range.
     * Defining an Inbound NAT pool on your Load Balancer is mutually exclusive
     * with defining inbound Nat rules. Inbound NAT pools are referenced from
     * virtual machine scale sets. NICs that are associated with individual virtual
     * machines cannot reference an inbound NAT pool. They have to reference
     * individual inbound NAT rules.
     *
     * @param {array} [parameters.outboundNatRules] The outbound NAT rules.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * load balancer resource.
     *
     * @param {string} [parameters.provisioningState] Gets the provisioning state
     * of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, loadBalancerName: string, parameters: models.LoadBalancer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancer>): void;
    beginCreateOrUpdate(resourceGroupName: string, loadBalancerName: string, parameters: models.LoadBalancer, callback: ServiceCallback<models.LoadBalancer>): void;

    /**
     * Gets all the load balancers in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancerListResult>): void;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.LoadBalancerListResult>): void;

    /**
     * Gets all the load balancers in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoadBalancerListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.LoadBalancerListResult>): void;
}

/**
 * @class
 * VirtualNetworks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface VirtualNetworks {

    /**
     * Deletes the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, virtualNetworkName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, virtualNetworkName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the specified virtual network by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, virtualNetworkName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetwork>): void;
    get(resourceGroupName: string, virtualNetworkName: string, callback: ServiceCallback<models.VirtualNetwork>): void;

    /**
     * Creates or updates a virtual network in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * virtual network operation
     *
     * @param {object} [parameters.addressSpace] The AddressSpace that contains an
     * array of IP address ranges that can be used by subnets.
     *
     * @param {array} [parameters.addressSpace.addressPrefixes] A list of address
     * blocks reserved for this virtual network in CIDR notation.
     *
     * @param {object} [parameters.dhcpOptions] The dhcpOptions that contains an
     * array of DNS servers available to VMs deployed in the virtual network.
     *
     * @param {array} [parameters.dhcpOptions.dnsServers] The list of DNS servers
     * IP addresses.
     *
     * @param {array} [parameters.subnets] A list of subnets in a Virtual Network.
     *
     * @param {array} [parameters.virtualNetworkPeerings] A list of peerings in a
     * Virtual Network.
     *
     * @param {string} [parameters.resourceGuid] The resourceGuid property of the
     * Virtual Network resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, virtualNetworkName: string, parameters: models.VirtualNetwork, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetwork>): void;
    createOrUpdate(resourceGroupName: string, virtualNetworkName: string, parameters: models.VirtualNetwork, callback: ServiceCallback<models.VirtualNetwork>): void;

    /**
     * Gets all virtual networks in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkListResult>): void;
    listAll(callback: ServiceCallback<models.VirtualNetworkListResult>): void;

    /**
     * Gets all virtual networks in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkListResult>): void;
    list(resourceGroupName: string, callback: ServiceCallback<models.VirtualNetworkListResult>): void;

    /**
     * Checks whether a private IP address is available for use.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ipAddress] The private IP address to be verified.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    checkIPAddressAvailability(resourceGroupName: string, virtualNetworkName: string, options: { ipAddress? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IPAddressAvailabilityResult>): void;
    checkIPAddressAvailability(resourceGroupName: string, virtualNetworkName: string, callback: ServiceCallback<models.IPAddressAvailabilityResult>): void;

    /**
     * Deletes the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, virtualNetworkName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, virtualNetworkName: string, callback: ServiceCallback<void>): void;

    /**
     * Creates or updates a virtual network in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * virtual network operation
     *
     * @param {object} [parameters.addressSpace] The AddressSpace that contains an
     * array of IP address ranges that can be used by subnets.
     *
     * @param {array} [parameters.addressSpace.addressPrefixes] A list of address
     * blocks reserved for this virtual network in CIDR notation.
     *
     * @param {object} [parameters.dhcpOptions] The dhcpOptions that contains an
     * array of DNS servers available to VMs deployed in the virtual network.
     *
     * @param {array} [parameters.dhcpOptions.dnsServers] The list of DNS servers
     * IP addresses.
     *
     * @param {array} [parameters.subnets] A list of subnets in a Virtual Network.
     *
     * @param {array} [parameters.virtualNetworkPeerings] A list of peerings in a
     * Virtual Network.
     *
     * @param {string} [parameters.resourceGuid] The resourceGuid property of the
     * Virtual Network resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkName: string, parameters: models.VirtualNetwork, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetwork>): void;
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkName: string, parameters: models.VirtualNetwork, callback: ServiceCallback<models.VirtualNetwork>): void;

    /**
     * Gets all virtual networks in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkListResult>): void;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.VirtualNetworkListResult>): void;

    /**
     * Gets all virtual networks in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.VirtualNetworkListResult>): void;
}

/**
 * @class
 * Subnets
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface Subnets {

    /**
     * Deletes the specified subnet.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, virtualNetworkName: string, subnetName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, virtualNetworkName: string, subnetName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the specified subnet by virtual network and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, virtualNetworkName: string, subnetName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Subnet>): void;
    get(resourceGroupName: string, virtualNetworkName: string, subnetName: string, callback: ServiceCallback<models.Subnet>): void;

    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {object} subnetParameters Parameters supplied to the create or update
     * subnet operation.
     *
     * @param {string} [subnetParameters.addressPrefix] The address prefix for the
     * subnet.
     *
     * @param {object} [subnetParameters.networkSecurityGroup] The reference of the
     * NetworkSecurityGroup resource.
     *
     * @param {array} [subnetParameters.networkSecurityGroup.securityRules] A
     * collection of security rules of the network security group.
     *
     * @param {array} [subnetParameters.networkSecurityGroup.defaultSecurityRules]
     * The default security rules of network security group.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.resourceGuid] The
     * resource GUID property of the network security group resource.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.provisioningState]
     * The provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.etag] A unique
     * read-only string that changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.id] Resource ID.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.location] Resource
     * location.
     *
     * @param {object} [subnetParameters.networkSecurityGroup.tags] Resource tags.
     *
     * @param {object} [subnetParameters.routeTable] The reference of the
     * RouteTable resource.
     *
     * @param {array} [subnetParameters.routeTable.routes] Collection of routes
     * contained within a route table.
     *
     * @param {string} [subnetParameters.routeTable.provisioningState] The
     * provisioning state of the resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [subnetParameters.routeTable.etag] Gets a unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.routeTable.id] Resource ID.
     *
     * @param {string} [subnetParameters.routeTable.location] Resource location.
     *
     * @param {object} [subnetParameters.routeTable.tags] Resource tags.
     *
     * @param {array} [subnetParameters.resourceNavigationLinks] Gets an array of
     * references to the external resources using subnet.
     *
     * @param {string} [subnetParameters.provisioningState] The provisioning state
     * of the resource.
     *
     * @param {string} [subnetParameters.name] The name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [subnetParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, virtualNetworkName: string, subnetName: string, subnetParameters: models.Subnet, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Subnet>): void;
    createOrUpdate(resourceGroupName: string, virtualNetworkName: string, subnetName: string, subnetParameters: models.Subnet, callback: ServiceCallback<models.Subnet>): void;

    /**
     * Gets all subnets in a virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, virtualNetworkName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubnetListResult>): void;
    list(resourceGroupName: string, virtualNetworkName: string, callback: ServiceCallback<models.SubnetListResult>): void;

    /**
     * Deletes the specified subnet.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, virtualNetworkName: string, subnetName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, virtualNetworkName: string, subnetName: string, callback: ServiceCallback<void>): void;

    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {object} subnetParameters Parameters supplied to the create or update
     * subnet operation.
     *
     * @param {string} [subnetParameters.addressPrefix] The address prefix for the
     * subnet.
     *
     * @param {object} [subnetParameters.networkSecurityGroup] The reference of the
     * NetworkSecurityGroup resource.
     *
     * @param {array} [subnetParameters.networkSecurityGroup.securityRules] A
     * collection of security rules of the network security group.
     *
     * @param {array} [subnetParameters.networkSecurityGroup.defaultSecurityRules]
     * The default security rules of network security group.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.resourceGuid] The
     * resource GUID property of the network security group resource.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.provisioningState]
     * The provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.etag] A unique
     * read-only string that changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.id] Resource ID.
     *
     * @param {string} [subnetParameters.networkSecurityGroup.location] Resource
     * location.
     *
     * @param {object} [subnetParameters.networkSecurityGroup.tags] Resource tags.
     *
     * @param {object} [subnetParameters.routeTable] The reference of the
     * RouteTable resource.
     *
     * @param {array} [subnetParameters.routeTable.routes] Collection of routes
     * contained within a route table.
     *
     * @param {string} [subnetParameters.routeTable.provisioningState] The
     * provisioning state of the resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [subnetParameters.routeTable.etag] Gets a unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.routeTable.id] Resource ID.
     *
     * @param {string} [subnetParameters.routeTable.location] Resource location.
     *
     * @param {object} [subnetParameters.routeTable.tags] Resource tags.
     *
     * @param {array} [subnetParameters.resourceNavigationLinks] Gets an array of
     * references to the external resources using subnet.
     *
     * @param {string} [subnetParameters.provisioningState] The provisioning state
     * of the resource.
     *
     * @param {string} [subnetParameters.name] The name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [subnetParameters.etag] A unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [subnetParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkName: string, subnetName: string, subnetParameters: models.Subnet, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Subnet>): void;
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkName: string, subnetName: string, subnetParameters: models.Subnet, callback: ServiceCallback<models.Subnet>): void;

    /**
     * Gets all subnets in a virtual network.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubnetListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.SubnetListResult>): void;
}

/**
 * @class
 * VirtualNetworkPeerings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface VirtualNetworkPeerings {

    /**
     * Deletes the specified virtual network peering.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the virtual network
     * peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the specified virtual network peering.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the virtual network
     * peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkPeering>): void;
    get(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, callback: ServiceCallback<models.VirtualNetworkPeering>): void;

    /**
     * Creates or updates a peering in the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the peering.
     *
     * @param {object} virtualNetworkPeeringParameters Parameters supplied to the
     * create or update virtual network peering operation.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowVirtualNetworkAccess]
     * Whether the VMs in the linked virtual network space would be able to access
     * all the VMs in local Virtual network space.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowForwardedTraffic]
     * Whether the forwarded traffic from the VMs in the remote virtual network
     * will be allowed/disallowed.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowGatewayTransit] If
     * gateway links can be used in remote virtual networking to link to this
     * virtual network.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.useRemoteGateways] If
     * remote gateways can be used on this virtual network. If the flag is set to
     * true, and allowGatewayTransit on remote peering is also true, virtual
     * network will use gateways of remote virtual network for transit. Only one
     * peering can have this flag set to true. This flag cannot be set if virtual
     * network already has a gateway.
     *
     * @param {object} [virtualNetworkPeeringParameters.remoteVirtualNetwork] The
     * reference of the remote virtual network.
     *
     * @param {string} [virtualNetworkPeeringParameters.remoteVirtualNetwork.id]
     * Resource ID.
     *
     * @param {string} [virtualNetworkPeeringParameters.peeringState] The status of
     * the virtual network peering. Possible values are 'Initiated', 'Connected',
     * and 'Disconnected'. Possible values include: 'Initiated', 'Connected',
     * 'Disconnected'
     *
     * @param {string} [virtualNetworkPeeringParameters.provisioningState] The
     * provisioning state of the resource.
     *
     * @param {string} [virtualNetworkPeeringParameters.name] The name of the
     * resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @param {string} [virtualNetworkPeeringParameters.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [virtualNetworkPeeringParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, virtualNetworkPeeringParameters: models.VirtualNetworkPeering, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkPeering>): void;
    createOrUpdate(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, virtualNetworkPeeringParameters: models.VirtualNetworkPeering, callback: ServiceCallback<models.VirtualNetworkPeering>): void;

    /**
     * Gets all virtual network peerings in a virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, virtualNetworkName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkPeeringListResult>): void;
    list(resourceGroupName: string, virtualNetworkName: string, callback: ServiceCallback<models.VirtualNetworkPeeringListResult>): void;

    /**
     * Deletes the specified virtual network peering.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the virtual network
     * peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, callback: ServiceCallback<void>): void;

    /**
     * Creates or updates a peering in the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the peering.
     *
     * @param {object} virtualNetworkPeeringParameters Parameters supplied to the
     * create or update virtual network peering operation.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowVirtualNetworkAccess]
     * Whether the VMs in the linked virtual network space would be able to access
     * all the VMs in local Virtual network space.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowForwardedTraffic]
     * Whether the forwarded traffic from the VMs in the remote virtual network
     * will be allowed/disallowed.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.allowGatewayTransit] If
     * gateway links can be used in remote virtual networking to link to this
     * virtual network.
     *
     * @param {boolean} [virtualNetworkPeeringParameters.useRemoteGateways] If
     * remote gateways can be used on this virtual network. If the flag is set to
     * true, and allowGatewayTransit on remote peering is also true, virtual
     * network will use gateways of remote virtual network for transit. Only one
     * peering can have this flag set to true. This flag cannot be set if virtual
     * network already has a gateway.
     *
     * @param {object} [virtualNetworkPeeringParameters.remoteVirtualNetwork] The
     * reference of the remote virtual network.
     *
     * @param {string} [virtualNetworkPeeringParameters.remoteVirtualNetwork.id]
     * Resource ID.
     *
     * @param {string} [virtualNetworkPeeringParameters.peeringState] The status of
     * the virtual network peering. Possible values are 'Initiated', 'Connected',
     * and 'Disconnected'. Possible values include: 'Initiated', 'Connected',
     * 'Disconnected'
     *
     * @param {string} [virtualNetworkPeeringParameters.provisioningState] The
     * provisioning state of the resource.
     *
     * @param {string} [virtualNetworkPeeringParameters.name] The name of the
     * resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @param {string} [virtualNetworkPeeringParameters.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [virtualNetworkPeeringParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, virtualNetworkPeeringParameters: models.VirtualNetworkPeering, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkPeering>): void;
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkName: string, virtualNetworkPeeringName: string, virtualNetworkPeeringParameters: models.VirtualNetworkPeering, callback: ServiceCallback<models.VirtualNetworkPeering>): void;

    /**
     * Gets all virtual network peerings in a virtual network.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkPeeringListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.VirtualNetworkPeeringListResult>): void;
}

/**
 * @class
 * NetworkInterfaces
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface NetworkInterfaces {

    /**
     * Deletes the specified network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, networkInterfaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets information about the specified network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, networkInterfaceName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterface>): void;
    get(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<models.NetworkInterface>): void;

    /**
     * Creates or updates a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * network interface operation.
     *
     * @param {object} [parameters.virtualMachine] The reference of a virtual
     * machine.
     *
     * @param {string} [parameters.virtualMachine.id] Resource ID.
     *
     * @param {object} [parameters.networkSecurityGroup] The reference of the
     * NetworkSecurityGroup resource.
     *
     * @param {array} [parameters.networkSecurityGroup.securityRules] A collection
     * of security rules of the network security group.
     *
     * @param {array} [parameters.networkSecurityGroup.defaultSecurityRules] The
     * default security rules of network security group.
     *
     * @param {string} [parameters.networkSecurityGroup.resourceGuid] The resource
     * GUID property of the network security group resource.
     *
     * @param {string} [parameters.networkSecurityGroup.provisioningState] The
     * provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [parameters.networkSecurityGroup.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.networkSecurityGroup.id] Resource ID.
     *
     * @param {string} [parameters.networkSecurityGroup.location] Resource
     * location.
     *
     * @param {object} [parameters.networkSecurityGroup.tags] Resource tags.
     *
     * @param {array} [parameters.ipConfigurations] A list of IPConfigurations of
     * the network interface.
     *
     * @param {object} [parameters.dnsSettings] The DNS settings in network
     * interface.
     *
     * @param {array} [parameters.dnsSettings.dnsServers] List of DNS servers IP
     * addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS
     * resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it
     * must be the only value in dnsServers collection.
     *
     * @param {array} [parameters.dnsSettings.appliedDnsServers] If the VM that
     * uses this NIC is part of an Availability Set, then this list will have the
     * union of all DNS servers from all NICs that are part of the Availability
     * Set. This property is what is configured on each of those VMs.
     *
     * @param {string} [parameters.dnsSettings.internalDnsNameLabel] Relative DNS
     * name for this NIC used for internal communications between VMs in the same
     * virtual network.
     *
     * @param {string} [parameters.dnsSettings.internalFqdn] Fully qualified DNS
     * name supporting internal communications between VMs in the same virtual
     * network.
     *
     * @param {string} [parameters.dnsSettings.internalDomainNameSuffix] Even if
     * internalDnsNameLabel is not specified, a DNS entry is created for the
     * primary NIC of the VM. This DNS name can be constructed by concatenating the
     * VM name with the value of internalDomainNameSuffix.
     *
     * @param {string} [parameters.macAddress] The MAC address of the network
     * interface.
     *
     * @param {boolean} [parameters.primary] Gets whether this is a primary network
     * interface on a virtual machine.
     *
     * @param {boolean} [parameters.enableAcceleratedNetworking] If the network
     * interface is accelerated networking enabled.
     *
     * @param {boolean} [parameters.enableIPForwarding] Indicates whether IP
     * forwarding is enabled on this network interface.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * network interface resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: models.NetworkInterface, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterface>): void;
    createOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: models.NetworkInterface, callback: ServiceCallback<models.NetworkInterface>): void;

    /**
     * Gets all network interfaces in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    listAll(callback: ServiceCallback<models.NetworkInterfaceListResult>): void;

    /**
     * Gets all network interfaces in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    list(resourceGroupName: string, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;

    /**
     * Gets all route tables applied to a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EffectiveRouteListResult>): void;
    getEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<models.EffectiveRouteListResult>): void;

    /**
     * Gets all network security groups applied to a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EffectiveNetworkSecurityGroupListResult>): void;
    listEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<models.EffectiveNetworkSecurityGroupListResult>): void;

    /**
     * Gets information about all network interfaces in a virtual machine in a
     * virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listVirtualMachineScaleSetVMNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    listVirtualMachineScaleSetVMNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;

    /**
     * Gets all network interfaces in a virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listVirtualMachineScaleSetNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    listVirtualMachineScaleSetNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;

    /**
     * Get the specified network interface in a virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getVirtualMachineScaleSetNetworkInterface(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterface>): void;
    getVirtualMachineScaleSetNetworkInterface(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, callback: ServiceCallback<models.NetworkInterface>): void;

    /**
     * Deletes the specified network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, networkInterfaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<void>): void;

    /**
     * Creates or updates a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * network interface operation.
     *
     * @param {object} [parameters.virtualMachine] The reference of a virtual
     * machine.
     *
     * @param {string} [parameters.virtualMachine.id] Resource ID.
     *
     * @param {object} [parameters.networkSecurityGroup] The reference of the
     * NetworkSecurityGroup resource.
     *
     * @param {array} [parameters.networkSecurityGroup.securityRules] A collection
     * of security rules of the network security group.
     *
     * @param {array} [parameters.networkSecurityGroup.defaultSecurityRules] The
     * default security rules of network security group.
     *
     * @param {string} [parameters.networkSecurityGroup.resourceGuid] The resource
     * GUID property of the network security group resource.
     *
     * @param {string} [parameters.networkSecurityGroup.provisioningState] The
     * provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [parameters.networkSecurityGroup.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.networkSecurityGroup.id] Resource ID.
     *
     * @param {string} [parameters.networkSecurityGroup.location] Resource
     * location.
     *
     * @param {object} [parameters.networkSecurityGroup.tags] Resource tags.
     *
     * @param {array} [parameters.ipConfigurations] A list of IPConfigurations of
     * the network interface.
     *
     * @param {object} [parameters.dnsSettings] The DNS settings in network
     * interface.
     *
     * @param {array} [parameters.dnsSettings.dnsServers] List of DNS servers IP
     * addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS
     * resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it
     * must be the only value in dnsServers collection.
     *
     * @param {array} [parameters.dnsSettings.appliedDnsServers] If the VM that
     * uses this NIC is part of an Availability Set, then this list will have the
     * union of all DNS servers from all NICs that are part of the Availability
     * Set. This property is what is configured on each of those VMs.
     *
     * @param {string} [parameters.dnsSettings.internalDnsNameLabel] Relative DNS
     * name for this NIC used for internal communications between VMs in the same
     * virtual network.
     *
     * @param {string} [parameters.dnsSettings.internalFqdn] Fully qualified DNS
     * name supporting internal communications between VMs in the same virtual
     * network.
     *
     * @param {string} [parameters.dnsSettings.internalDomainNameSuffix] Even if
     * internalDnsNameLabel is not specified, a DNS entry is created for the
     * primary NIC of the VM. This DNS name can be constructed by concatenating the
     * VM name with the value of internalDomainNameSuffix.
     *
     * @param {string} [parameters.macAddress] The MAC address of the network
     * interface.
     *
     * @param {boolean} [parameters.primary] Gets whether this is a primary network
     * interface on a virtual machine.
     *
     * @param {boolean} [parameters.enableAcceleratedNetworking] If the network
     * interface is accelerated networking enabled.
     *
     * @param {boolean} [parameters.enableIPForwarding] Indicates whether IP
     * forwarding is enabled on this network interface.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * network interface resource.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: models.NetworkInterface, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterface>): void;
    beginCreateOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: models.NetworkInterface, callback: ServiceCallback<models.NetworkInterface>): void;

    /**
     * Gets all route tables applied to a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginGetEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EffectiveRouteListResult>): void;
    beginGetEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<models.EffectiveRouteListResult>): void;

    /**
     * Gets all network security groups applied to a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginListEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EffectiveNetworkSecurityGroupListResult>): void;
    beginListEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<models.EffectiveNetworkSecurityGroupListResult>): void;

    /**
     * Gets all network interfaces in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;

    /**
     * Gets all network interfaces in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;

    /**
     * Gets information about all network interfaces in a virtual machine in a
     * virtual machine scale set.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listVirtualMachineScaleSetVMNetworkInterfacesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    listVirtualMachineScaleSetVMNetworkInterfacesNext(nextPageLink: string, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;

    /**
     * Gets all network interfaces in a virtual machine scale set.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listVirtualMachineScaleSetNetworkInterfacesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
    listVirtualMachineScaleSetNetworkInterfacesNext(nextPageLink: string, callback: ServiceCallback<models.NetworkInterfaceListResult>): void;
}

/**
 * @class
 * Usages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface Usages {

    /**
     * Lists compute usages for a subscription.
     *
     * @param {string} location The location where resource usage is queried.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(location: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsagesListResult>): void;
    list(location: string, callback: ServiceCallback<models.UsagesListResult>): void;

    /**
     * Lists compute usages for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsagesListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.UsagesListResult>): void;
}

/**
 * @class
 * VirtualNetworkGateways
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface VirtualNetworkGateways {

    /**
     * Creates or updates a virtual network gateway in the specified resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to create or update virtual
     * network gateway operation.
     *
     * @param {array} parameters.ipConfigurations IP configurations for virtual
     * network gateway.
     *
     * @param {string} parameters.gatewayType The type of this virtual network
     * gateway. Possible values are: 'Vpn' and 'ExpressRoute'. Possible values
     * include: 'Vpn', 'ExpressRoute'
     *
     * @param {string} parameters.vpnType The type of this virtual network gateway.
     * Possible values are: 'PolicyBased' and 'RouteBased'. Possible values
     * include: 'PolicyBased', 'RouteBased'
     *
     * @param {boolean} [parameters.enableBgp] Whether BGP is enabled for this
     * virtual network gateway or not.
     *
     * @param {boolean} [parameters.activeActive] ActiveActive flag
     *
     * @param {object} [parameters.gatewayDefaultSite] The reference of the
     * LocalNetworkGateway resource which represents local network site having
     * default routes. Assign Null value in case of removing existing default site
     * setting.
     *
     * @param {string} [parameters.gatewayDefaultSite.id] Resource ID.
     *
     * @param {object} [parameters.sku] The reference of the
     * VirtualNetworkGatewaySku resource which represents the SKU selected for
     * Virtual network gateway.
     *
     * @param {string} parameters.sku.name Gateway SKU name. Possible values are:
     * 'Basic', 'HighPerformance','Standard', and 'UltraPerformance'. Possible
     * values include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance'
     *
     * @param {string} parameters.sku.tier Gateway SKU tier. Possible values are:
     * 'Basic', 'HighPerformance','Standard', and 'UltraPerformance'. Possible
     * values include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance'
     *
     * @param {number} [parameters.sku.capacity] The capacity.
     *
     * @param {object} [parameters.vpnClientConfiguration] The reference of the
     * VpnClientConfiguration resource which represents the P2S VpnClient
     * configurations.
     *
     * @param {object} [parameters.vpnClientConfiguration.vpnClientAddressPool] The
     * reference of the address space resource which represents Address space for
     * P2S VpnClient.
     *
     * @param {array}
     * [parameters.vpnClientConfiguration.vpnClientAddressPool.addressPrefixes] A
     * list of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {array} [parameters.vpnClientConfiguration.vpnClientRootCertificates]
     * VpnClientRootCertificate for virtual network gateway.
     *
     * @param {array}
     * [parameters.vpnClientConfiguration.vpnClientRevokedCertificates]
     * VpnClientRevokedCertificate for Virtual network gateway.
     *
     * @param {object} [parameters.bgpSettings] Virtual network gateway's BGP
     * speaker settings.
     *
     * @param {number} [parameters.bgpSettings.asn] The BGP speaker's ASN.
     *
     * @param {string} [parameters.bgpSettings.bgpPeeringAddress] The BGP peering
     * address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.bgpSettings.peerWeight] The weight added to
     * routes learned from this BGP speaker.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * VirtualNetworkGateway resource.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VirtualNetworkGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGateway>): void;
    createOrUpdate(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VirtualNetworkGateway, callback: ServiceCallback<models.VirtualNetworkGateway>): void;

    /**
     * Gets the specified virtual network gateway by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, virtualNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGateway>): void;
    get(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<models.VirtualNetworkGateway>): void;

    /**
     * Deletes the specified virtual network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, virtualNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets all virtual network gateways by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayListResult>): void;
    list(resourceGroupName: string, callback: ServiceCallback<models.VirtualNetworkGatewayListResult>): void;

    /**
     * Resets the primary of the virtual network gateway in the specified resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.gatewayVip] Virtual network gateway vip address
     * supplied to the begin reset of the active-active feature enabled gateway.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    reset(resourceGroupName: string, virtualNetworkGatewayName: string, options: { gatewayVip? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGateway>): void;
    reset(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<models.VirtualNetworkGateway>): void;

    /**
     * Generates VPN client package for P2S client of the virtual network gateway
     * in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to the generate virtual
     * network gateway VPN client package operation.
     *
     * @param {string} parameters.processorArchitecture VPN client Processor
     * Architecture. Possible values are: 'AMD64' and 'X86'. Possible values
     * include: 'Amd64', 'X86'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    generatevpnclientpackage(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    generatevpnclientpackage(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VpnClientParameters, callback: ServiceCallback<string>): void;

    /**
     * The GetBgpPeerStatus operation retrieves the status of all BGP peers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.peer] The IP address of the peer to retrieve the
     * status of.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBgpPeerStatus(resourceGroupName: string, virtualNetworkGatewayName: string, options: { peer? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BgpPeerStatusListResult>): void;
    getBgpPeerStatus(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<models.BgpPeerStatusListResult>): void;

    /**
     * This operation retrieves a list of routes the virtual network gateway has
     * learned, including routes learned from BGP peers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getLearnedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayRouteListResult>): void;
    getLearnedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<models.GatewayRouteListResult>): void;

    /**
     * This operation retrieves a list of routes the virtual network gateway is
     * advertising to the specified peer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {string} peer The IP address of the peer
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAdvertisedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, peer: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayRouteListResult>): void;
    getAdvertisedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, peer: string, callback: ServiceCallback<models.GatewayRouteListResult>): void;

    /**
     * Creates or updates a virtual network gateway in the specified resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to create or update virtual
     * network gateway operation.
     *
     * @param {array} parameters.ipConfigurations IP configurations for virtual
     * network gateway.
     *
     * @param {string} parameters.gatewayType The type of this virtual network
     * gateway. Possible values are: 'Vpn' and 'ExpressRoute'. Possible values
     * include: 'Vpn', 'ExpressRoute'
     *
     * @param {string} parameters.vpnType The type of this virtual network gateway.
     * Possible values are: 'PolicyBased' and 'RouteBased'. Possible values
     * include: 'PolicyBased', 'RouteBased'
     *
     * @param {boolean} [parameters.enableBgp] Whether BGP is enabled for this
     * virtual network gateway or not.
     *
     * @param {boolean} [parameters.activeActive] ActiveActive flag
     *
     * @param {object} [parameters.gatewayDefaultSite] The reference of the
     * LocalNetworkGateway resource which represents local network site having
     * default routes. Assign Null value in case of removing existing default site
     * setting.
     *
     * @param {string} [parameters.gatewayDefaultSite.id] Resource ID.
     *
     * @param {object} [parameters.sku] The reference of the
     * VirtualNetworkGatewaySku resource which represents the SKU selected for
     * Virtual network gateway.
     *
     * @param {string} parameters.sku.name Gateway SKU name. Possible values are:
     * 'Basic', 'HighPerformance','Standard', and 'UltraPerformance'. Possible
     * values include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance'
     *
     * @param {string} parameters.sku.tier Gateway SKU tier. Possible values are:
     * 'Basic', 'HighPerformance','Standard', and 'UltraPerformance'. Possible
     * values include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance'
     *
     * @param {number} [parameters.sku.capacity] The capacity.
     *
     * @param {object} [parameters.vpnClientConfiguration] The reference of the
     * VpnClientConfiguration resource which represents the P2S VpnClient
     * configurations.
     *
     * @param {object} [parameters.vpnClientConfiguration.vpnClientAddressPool] The
     * reference of the address space resource which represents Address space for
     * P2S VpnClient.
     *
     * @param {array}
     * [parameters.vpnClientConfiguration.vpnClientAddressPool.addressPrefixes] A
     * list of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {array} [parameters.vpnClientConfiguration.vpnClientRootCertificates]
     * VpnClientRootCertificate for virtual network gateway.
     *
     * @param {array}
     * [parameters.vpnClientConfiguration.vpnClientRevokedCertificates]
     * VpnClientRevokedCertificate for Virtual network gateway.
     *
     * @param {object} [parameters.bgpSettings] Virtual network gateway's BGP
     * speaker settings.
     *
     * @param {number} [parameters.bgpSettings.asn] The BGP speaker's ASN.
     *
     * @param {string} [parameters.bgpSettings.bgpPeeringAddress] The BGP peering
     * address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.bgpSettings.peerWeight] The weight added to
     * routes learned from this BGP speaker.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * VirtualNetworkGateway resource.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VirtualNetworkGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGateway>): void;
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: models.VirtualNetworkGateway, callback: ServiceCallback<models.VirtualNetworkGateway>): void;

    /**
     * Deletes the specified virtual network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, virtualNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<void>): void;

    /**
     * Resets the primary of the virtual network gateway in the specified resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.gatewayVip] Virtual network gateway vip address
     * supplied to the begin reset of the active-active feature enabled gateway.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginReset(resourceGroupName: string, virtualNetworkGatewayName: string, options: { gatewayVip? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGateway>): void;
    beginReset(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<models.VirtualNetworkGateway>): void;

    /**
     * The GetBgpPeerStatus operation retrieves the status of all BGP peers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.peer] The IP address of the peer to retrieve the
     * status of.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginGetBgpPeerStatus(resourceGroupName: string, virtualNetworkGatewayName: string, options: { peer? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BgpPeerStatusListResult>): void;
    beginGetBgpPeerStatus(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<models.BgpPeerStatusListResult>): void;

    /**
     * This operation retrieves a list of routes the virtual network gateway has
     * learned, including routes learned from BGP peers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginGetLearnedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayRouteListResult>): void;
    beginGetLearnedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, callback: ServiceCallback<models.GatewayRouteListResult>): void;

    /**
     * This operation retrieves a list of routes the virtual network gateway is
     * advertising to the specified peer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {string} peer The IP address of the peer
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginGetAdvertisedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, peer: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayRouteListResult>): void;
    beginGetAdvertisedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, peer: string, callback: ServiceCallback<models.GatewayRouteListResult>): void;

    /**
     * Gets all virtual network gateways by resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.VirtualNetworkGatewayListResult>): void;
}

/**
 * @class
 * VirtualNetworkGatewayConnections
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface VirtualNetworkGatewayConnections {

    /**
     * Creates or updates a virtual network gateway connection in the specified
     * resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * virtual network gateway connection operation.
     *
     * @param {string} [parameters.authorizationKey] The authorizationKey.
     *
     * @param {object} parameters.virtualNetworkGateway1
     *
     * @param {object} [parameters.virtualNetworkGateway2]
     *
     * @param {array} parameters.virtualNetworkGateway2.ipConfigurations IP
     * configurations for virtual network gateway.
     *
     * @param {string} parameters.virtualNetworkGateway2.gatewayType The type of
     * this virtual network gateway. Possible values are: 'Vpn' and 'ExpressRoute'.
     * Possible values include: 'Vpn', 'ExpressRoute'
     *
     * @param {string} parameters.virtualNetworkGateway2.vpnType The type of this
     * virtual network gateway. Possible values are: 'PolicyBased' and
     * 'RouteBased'. Possible values include: 'PolicyBased', 'RouteBased'
     *
     * @param {boolean} [parameters.virtualNetworkGateway2.enableBgp] Whether BGP
     * is enabled for this virtual network gateway or not.
     *
     * @param {boolean} [parameters.virtualNetworkGateway2.activeActive]
     * ActiveActive flag
     *
     * @param {object} [parameters.virtualNetworkGateway2.gatewayDefaultSite] The
     * reference of the LocalNetworkGateway resource which represents local network
     * site having default routes. Assign Null value in case of removing existing
     * default site setting.
     *
     * @param {object} [parameters.virtualNetworkGateway2.sku] The reference of the
     * VirtualNetworkGatewaySku resource which represents the SKU selected for
     * Virtual network gateway.
     *
     * @param {string} parameters.virtualNetworkGateway2.sku.name Gateway SKU name.
     * Possible values are: 'Basic', 'HighPerformance','Standard', and
     * 'UltraPerformance'. Possible values include: 'Basic', 'HighPerformance',
     * 'Standard', 'UltraPerformance'
     *
     * @param {string} parameters.virtualNetworkGateway2.sku.tier Gateway SKU tier.
     * Possible values are: 'Basic', 'HighPerformance','Standard', and
     * 'UltraPerformance'. Possible values include: 'Basic', 'HighPerformance',
     * 'Standard', 'UltraPerformance'
     *
     * @param {number} [parameters.virtualNetworkGateway2.sku.capacity] The
     * capacity.
     *
     * @param {object} [parameters.virtualNetworkGateway2.vpnClientConfiguration]
     * The reference of the VpnClientConfiguration resource which represents the
     * P2S VpnClient configurations.
     *
     * @param {object}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientAddressPool]
     * The reference of the address space resource which represents Address space
     * for P2S VpnClient.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientRootCertificates]
     * VpnClientRootCertificate for virtual network gateway.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientRevokedCertificates]
     * VpnClientRevokedCertificate for Virtual network gateway.
     *
     * @param {object} [parameters.virtualNetworkGateway2.bgpSettings] Virtual
     * network gateway's BGP speaker settings.
     *
     * @param {string} [parameters.virtualNetworkGateway2.resourceGuid] The
     * resource GUID property of the VirtualNetworkGateway resource.
     *
     * @param {string} [parameters.virtualNetworkGateway2.etag] Gets a unique
     * read-only string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.virtualNetworkGateway2.id] Resource ID.
     *
     * @param {string} [parameters.virtualNetworkGateway2.location] Resource
     * location.
     *
     * @param {object} [parameters.virtualNetworkGateway2.tags] Resource tags.
     *
     * @param {object} [parameters.localNetworkGateway2]
     *
     * @param {object} parameters.localNetworkGateway2.localNetworkAddressSpace
     * Local network site address space.
     *
     * @param {array}
     * [parameters.localNetworkGateway2.localNetworkAddressSpace.addressPrefixes] A
     * list of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {string} [parameters.localNetworkGateway2.gatewayIpAddress] IP
     * address of local network gateway.
     *
     * @param {object} [parameters.localNetworkGateway2.bgpSettings] Local network
     * gateway's BGP speaker settings.
     *
     * @param {number} [parameters.localNetworkGateway2.bgpSettings.asn] The BGP
     * speaker's ASN.
     *
     * @param {string}
     * [parameters.localNetworkGateway2.bgpSettings.bgpPeeringAddress] The BGP
     * peering address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.localNetworkGateway2.bgpSettings.peerWeight] The
     * weight added to routes learned from this BGP speaker.
     *
     * @param {string} [parameters.localNetworkGateway2.resourceGuid] The resource
     * GUID property of the LocalNetworkGateway resource.
     *
     * @param {string} [parameters.localNetworkGateway2.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.localNetworkGateway2.id] Resource ID.
     *
     * @param {string} [parameters.localNetworkGateway2.location] Resource
     * location.
     *
     * @param {object} [parameters.localNetworkGateway2.tags] Resource tags.
     *
     * @param {string} parameters.connectionType Gateway connection type. Possible
     * values are: 'Ipsec','Vnet2Vnet','ExpressRoute', and 'VPNClient. Possible
     * values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'
     *
     * @param {number} [parameters.routingWeight] The routing weight.
     *
     * @param {string} [parameters.sharedKey] The IPSec shared key.
     *
     * @param {object} [parameters.peer] The reference to peerings resource.
     *
     * @param {string} [parameters.peer.id] Resource ID.
     *
     * @param {boolean} [parameters.enableBgp] EnableBgp flag
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * VirtualNetworkGatewayConnection resource.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.VirtualNetworkGatewayConnection, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayConnection>): void;
    createOrUpdate(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.VirtualNetworkGatewayConnection, callback: ServiceCallback<models.VirtualNetworkGatewayConnection>): void;

    /**
     * Gets the specified virtual network gateway connection by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayConnection>): void;
    get(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, callback: ServiceCallback<models.VirtualNetworkGatewayConnection>): void;

    /**
     * Deletes the specified virtual network Gateway connection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, callback: ServiceCallback<void>): void;

    /**
     * The Put VirtualNetworkGatewayConnectionSharedKey operation sets the virtual
     * network gateway connection shared key for passed virtual network gateway
     * connection in the specified resource group through Network resource
     * provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection name.
     *
     * @param {object} parameters Parameters supplied to the Begin Set Virtual
     * Network Gateway connection Shared key operation throughNetwork resource
     * provider.
     *
     * @param {string} parameters.value The virtual network connection shared key
     * value.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    setSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionSharedKey, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionSharedKey>): void;
    setSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionSharedKey, callback: ServiceCallback<models.ConnectionSharedKey>): void;

    /**
     * The Get VirtualNetworkGatewayConnectionSharedKey operation retrieves
     * information about the specified virtual network gateway connection shared
     * key through Network resource provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection shared key name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionSharedKey>): void;
    getSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, callback: ServiceCallback<models.ConnectionSharedKey>): void;

    /**
     * The List VirtualNetworkGatewayConnections operation retrieves all the
     * virtual network gateways connections created.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayConnectionListResult>): void;
    list(resourceGroupName: string, callback: ServiceCallback<models.VirtualNetworkGatewayConnectionListResult>): void;

    /**
     * The VirtualNetworkGatewayConnectionResetSharedKey operation resets the
     * virtual network gateway connection shared key for passed virtual network
     * gateway connection in the specified resource group through Network resource
     * provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection reset shared key Name.
     *
     * @param {object} parameters Parameters supplied to the begin reset virtual
     * network gateway connection shared key operation through network resource
     * provider.
     *
     * @param {number} parameters.keyLength The virtual network connection reset
     * shared key length, should between 1 and 128.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    resetSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionResetSharedKey, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionResetSharedKey>): void;
    resetSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionResetSharedKey, callback: ServiceCallback<models.ConnectionResetSharedKey>): void;

    /**
     * Creates or updates a virtual network gateway connection in the specified
     * resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * virtual network gateway connection operation.
     *
     * @param {string} [parameters.authorizationKey] The authorizationKey.
     *
     * @param {object} parameters.virtualNetworkGateway1
     *
     * @param {object} [parameters.virtualNetworkGateway2]
     *
     * @param {array} parameters.virtualNetworkGateway2.ipConfigurations IP
     * configurations for virtual network gateway.
     *
     * @param {string} parameters.virtualNetworkGateway2.gatewayType The type of
     * this virtual network gateway. Possible values are: 'Vpn' and 'ExpressRoute'.
     * Possible values include: 'Vpn', 'ExpressRoute'
     *
     * @param {string} parameters.virtualNetworkGateway2.vpnType The type of this
     * virtual network gateway. Possible values are: 'PolicyBased' and
     * 'RouteBased'. Possible values include: 'PolicyBased', 'RouteBased'
     *
     * @param {boolean} [parameters.virtualNetworkGateway2.enableBgp] Whether BGP
     * is enabled for this virtual network gateway or not.
     *
     * @param {boolean} [parameters.virtualNetworkGateway2.activeActive]
     * ActiveActive flag
     *
     * @param {object} [parameters.virtualNetworkGateway2.gatewayDefaultSite] The
     * reference of the LocalNetworkGateway resource which represents local network
     * site having default routes. Assign Null value in case of removing existing
     * default site setting.
     *
     * @param {object} [parameters.virtualNetworkGateway2.sku] The reference of the
     * VirtualNetworkGatewaySku resource which represents the SKU selected for
     * Virtual network gateway.
     *
     * @param {string} parameters.virtualNetworkGateway2.sku.name Gateway SKU name.
     * Possible values are: 'Basic', 'HighPerformance','Standard', and
     * 'UltraPerformance'. Possible values include: 'Basic', 'HighPerformance',
     * 'Standard', 'UltraPerformance'
     *
     * @param {string} parameters.virtualNetworkGateway2.sku.tier Gateway SKU tier.
     * Possible values are: 'Basic', 'HighPerformance','Standard', and
     * 'UltraPerformance'. Possible values include: 'Basic', 'HighPerformance',
     * 'Standard', 'UltraPerformance'
     *
     * @param {number} [parameters.virtualNetworkGateway2.sku.capacity] The
     * capacity.
     *
     * @param {object} [parameters.virtualNetworkGateway2.vpnClientConfiguration]
     * The reference of the VpnClientConfiguration resource which represents the
     * P2S VpnClient configurations.
     *
     * @param {object}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientAddressPool]
     * The reference of the address space resource which represents Address space
     * for P2S VpnClient.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientRootCertificates]
     * VpnClientRootCertificate for virtual network gateway.
     *
     * @param {array}
     * [parameters.virtualNetworkGateway2.vpnClientConfiguration.vpnClientRevokedCertificates]
     * VpnClientRevokedCertificate for Virtual network gateway.
     *
     * @param {object} [parameters.virtualNetworkGateway2.bgpSettings] Virtual
     * network gateway's BGP speaker settings.
     *
     * @param {string} [parameters.virtualNetworkGateway2.resourceGuid] The
     * resource GUID property of the VirtualNetworkGateway resource.
     *
     * @param {string} [parameters.virtualNetworkGateway2.etag] Gets a unique
     * read-only string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.virtualNetworkGateway2.id] Resource ID.
     *
     * @param {string} [parameters.virtualNetworkGateway2.location] Resource
     * location.
     *
     * @param {object} [parameters.virtualNetworkGateway2.tags] Resource tags.
     *
     * @param {object} [parameters.localNetworkGateway2]
     *
     * @param {object} parameters.localNetworkGateway2.localNetworkAddressSpace
     * Local network site address space.
     *
     * @param {array}
     * [parameters.localNetworkGateway2.localNetworkAddressSpace.addressPrefixes] A
     * list of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {string} [parameters.localNetworkGateway2.gatewayIpAddress] IP
     * address of local network gateway.
     *
     * @param {object} [parameters.localNetworkGateway2.bgpSettings] Local network
     * gateway's BGP speaker settings.
     *
     * @param {number} [parameters.localNetworkGateway2.bgpSettings.asn] The BGP
     * speaker's ASN.
     *
     * @param {string}
     * [parameters.localNetworkGateway2.bgpSettings.bgpPeeringAddress] The BGP
     * peering address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.localNetworkGateway2.bgpSettings.peerWeight] The
     * weight added to routes learned from this BGP speaker.
     *
     * @param {string} [parameters.localNetworkGateway2.resourceGuid] The resource
     * GUID property of the LocalNetworkGateway resource.
     *
     * @param {string} [parameters.localNetworkGateway2.etag] A unique read-only
     * string that changes whenever the resource is updated.
     *
     * @param {string} [parameters.localNetworkGateway2.id] Resource ID.
     *
     * @param {string} [parameters.localNetworkGateway2.location] Resource
     * location.
     *
     * @param {object} [parameters.localNetworkGateway2.tags] Resource tags.
     *
     * @param {string} parameters.connectionType Gateway connection type. Possible
     * values are: 'Ipsec','Vnet2Vnet','ExpressRoute', and 'VPNClient. Possible
     * values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'
     *
     * @param {number} [parameters.routingWeight] The routing weight.
     *
     * @param {string} [parameters.sharedKey] The IPSec shared key.
     *
     * @param {object} [parameters.peer] The reference to peerings resource.
     *
     * @param {string} [parameters.peer.id] Resource ID.
     *
     * @param {boolean} [parameters.enableBgp] EnableBgp flag
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * VirtualNetworkGatewayConnection resource.
     *
     * @param {string} [parameters.etag] Gets a unique read-only string that
     * changes whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.VirtualNetworkGatewayConnection, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayConnection>): void;
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.VirtualNetworkGatewayConnection, callback: ServiceCallback<models.VirtualNetworkGatewayConnection>): void;

    /**
     * Deletes the specified virtual network Gateway connection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, callback: ServiceCallback<void>): void;

    /**
     * The Put VirtualNetworkGatewayConnectionSharedKey operation sets the virtual
     * network gateway connection shared key for passed virtual network gateway
     * connection in the specified resource group through Network resource
     * provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection name.
     *
     * @param {object} parameters Parameters supplied to the Begin Set Virtual
     * Network Gateway connection Shared key operation throughNetwork resource
     * provider.
     *
     * @param {string} parameters.value The virtual network connection shared key
     * value.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginSetSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionSharedKey, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionSharedKey>): void;
    beginSetSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionSharedKey, callback: ServiceCallback<models.ConnectionSharedKey>): void;

    /**
     * The VirtualNetworkGatewayConnectionResetSharedKey operation resets the
     * virtual network gateway connection shared key for passed virtual network
     * gateway connection in the specified resource group through Network resource
     * provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection reset shared key Name.
     *
     * @param {object} parameters Parameters supplied to the begin reset virtual
     * network gateway connection shared key operation through network resource
     * provider.
     *
     * @param {number} parameters.keyLength The virtual network connection reset
     * shared key length, should between 1 and 128.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginResetSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionResetSharedKey, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionResetSharedKey>): void;
    beginResetSharedKey(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: models.ConnectionResetSharedKey, callback: ServiceCallback<models.ConnectionResetSharedKey>): void;

    /**
     * The List VirtualNetworkGatewayConnections operation retrieves all the
     * virtual network gateways connections created.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkGatewayConnectionListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.VirtualNetworkGatewayConnectionListResult>): void;
}

/**
 * @class
 * LocalNetworkGateways
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface LocalNetworkGateways {

    /**
     * Creates or updates a local network gateway in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to the create or update local
     * network gateway operation.
     *
     * @param {object} parameters.localNetworkAddressSpace Local network site
     * address space.
     *
     * @param {array} [parameters.localNetworkAddressSpace.addressPrefixes] A list
     * of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {string} [parameters.gatewayIpAddress] IP address of local network
     * gateway.
     *
     * @param {object} [parameters.bgpSettings] Local network gateway's BGP speaker
     * settings.
     *
     * @param {number} [parameters.bgpSettings.asn] The BGP speaker's ASN.
     *
     * @param {string} [parameters.bgpSettings.bgpPeeringAddress] The BGP peering
     * address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.bgpSettings.peerWeight] The weight added to
     * routes learned from this BGP speaker.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * LocalNetworkGateway resource.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.LocalNetworkGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocalNetworkGateway>): void;
    createOrUpdate(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.LocalNetworkGateway, callback: ServiceCallback<models.LocalNetworkGateway>): void;

    /**
     * Gets the specified local network gateway in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, localNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocalNetworkGateway>): void;
    get(resourceGroupName: string, localNetworkGatewayName: string, callback: ServiceCallback<models.LocalNetworkGateway>): void;

    /**
     * Deletes the specified local network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, localNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, localNetworkGatewayName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets all the local network gateways in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocalNetworkGatewayListResult>): void;
    list(resourceGroupName: string, callback: ServiceCallback<models.LocalNetworkGatewayListResult>): void;

    /**
     * Creates or updates a local network gateway in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} parameters Parameters supplied to the create or update local
     * network gateway operation.
     *
     * @param {object} parameters.localNetworkAddressSpace Local network site
     * address space.
     *
     * @param {array} [parameters.localNetworkAddressSpace.addressPrefixes] A list
     * of address blocks reserved for this virtual network in CIDR notation.
     *
     * @param {string} [parameters.gatewayIpAddress] IP address of local network
     * gateway.
     *
     * @param {object} [parameters.bgpSettings] Local network gateway's BGP speaker
     * settings.
     *
     * @param {number} [parameters.bgpSettings.asn] The BGP speaker's ASN.
     *
     * @param {string} [parameters.bgpSettings.bgpPeeringAddress] The BGP peering
     * address and BGP identifier of this BGP speaker.
     *
     * @param {number} [parameters.bgpSettings.peerWeight] The weight added to
     * routes learned from this BGP speaker.
     *
     * @param {string} [parameters.resourceGuid] The resource GUID property of the
     * LocalNetworkGateway resource.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.LocalNetworkGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocalNetworkGateway>): void;
    beginCreateOrUpdate(resourceGroupName: string, localNetworkGatewayName: string, parameters: models.LocalNetworkGateway, callback: ServiceCallback<models.LocalNetworkGateway>): void;

    /**
     * Deletes the specified local network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, localNetworkGatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, localNetworkGatewayName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets all the local network gateways in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocalNetworkGatewayListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.LocalNetworkGatewayListResult>): void;
}

/**
 * @class
 * NetworkWatchers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface NetworkWatchers {

    /**
     * Creates or updates a network watcher in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the network watcher
     * resource.
     *
     * @param {string} [parameters.etag] A unique read-only string that changes
     * whenever the resource is updated.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, networkWatcherName: string, parameters: models.NetworkWatcher, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkWatcher>): void;
    createOrUpdate(resourceGroupName: string, networkWatcherName: string, parameters: models.NetworkWatcher, callback: ServiceCallback<models.NetworkWatcher>): void;

    /**
     * Gets the specified network watcher by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, networkWatcherName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkWatcher>): void;
    get(resourceGroupName: string, networkWatcherName: string, callback: ServiceCallback<models.NetworkWatcher>): void;

    /**
     * Deletes the specified network watcher resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, networkWatcherName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, networkWatcherName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets all network watchers by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkWatcherListResult>): void;
    list(resourceGroupName: string, callback: ServiceCallback<models.NetworkWatcherListResult>): void;

    /**
     * Gets all network watchers by subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkWatcherListResult>): void;
    listAll(callback: ServiceCallback<models.NetworkWatcherListResult>): void;

    /**
     * Gets the current network topology by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the representation of
     * topology.
     *
     * @param {string} parameters.targetResourceGroupName The name of the target
     * resource group to perform topology on.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTopology(resourceGroupName: string, networkWatcherName: string, parameters: models.TopologyParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Topology>): void;
    getTopology(resourceGroupName: string, networkWatcherName: string, parameters: models.TopologyParameters, callback: ServiceCallback<models.Topology>): void;

    /**
     * Verify IP flow from the specified VM to a location given the currently
     * configured NSG rules.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the IP flow to be
     * verified.
     *
     * @param {string} parameters.targetResourceId The ID of the target resource to
     * perform next-hop on.
     *
     * @param {string} parameters.direction The direction of the packet represented
     * as a 5-tuple. Possible values include: 'Inbound', 'Outbound'
     *
     * @param {string} parameters.protocol Protocol to be verified on. Possible
     * values include: 'TCP', 'UDP'
     *
     * @param {string} parameters.localPort The local port. Acceptable values are a
     * single integer in the range (0-65535). Support for * for the source port,
     * which depends on the direction.
     *
     * @param {string} parameters.remotePort The remote port. Acceptable values are
     * a single integer in the range (0-65535). Support for * for the source port,
     * which depends on the direction.
     *
     * @param {string} parameters.localIPAddress The local IP address. Acceptable
     * values are valid IPv4 addresses.
     *
     * @param {string} parameters.remoteIPAddress The remote IP address. Acceptable
     * values are valid IPv4 addresses.
     *
     * @param {string} [parameters.targetNicResourceId] The NIC ID. (If VM has
     * multiple NICs and IP forwarding is enabled on any of them, then this
     * parameter must be specified. Otherwise optional).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    verifyIPFlow(resourceGroupName: string, networkWatcherName: string, parameters: models.VerificationIPFlowParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VerificationIPFlowResult>): void;
    verifyIPFlow(resourceGroupName: string, networkWatcherName: string, parameters: models.VerificationIPFlowParameters, callback: ServiceCallback<models.VerificationIPFlowResult>): void;

    /**
     * Gets the next hop from the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the source and destination
     * endpoint.
     *
     * @param {string} parameters.targetResourceId The resource identifier of the
     * target resource against which the action is to be performed.
     *
     * @param {string} parameters.sourceIPAddress The source IP address.
     *
     * @param {string} parameters.destinationIPAddress The destination IP address.
     *
     * @param {string} [parameters.targetNicResourceId] The NIC ID. (If VM has
     * multiple NICs and IP forwarding is enabled on any of the nics, then this
     * parameter must be specified. Otherwise optional).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getNextHop(resourceGroupName: string, networkWatcherName: string, parameters: models.NextHopParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NextHopResult>): void;
    getNextHop(resourceGroupName: string, networkWatcherName: string, parameters: models.NextHopParameters, callback: ServiceCallback<models.NextHopResult>): void;

    /**
     * Gets the configured and effective security group rules on the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the VM to check security
     * groups for.
     *
     * @param {string} parameters.targetResourceId ID of the target VM.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getVMSecurityRules(resourceGroupName: string, networkWatcherName: string, parameters: models.SecurityGroupViewParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityGroupViewResult>): void;
    getVMSecurityRules(resourceGroupName: string, networkWatcherName: string, parameters: models.SecurityGroupViewParameters, callback: ServiceCallback<models.SecurityGroupViewResult>): void;

    /**
     * Initiate troubleshooting on a specified resource
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the resource to
     * troubleshoot.
     *
     * @param {string} parameters.targetResourceId The target resource to
     * troubleshoot.
     *
     * @param {string} parameters.storageId The ID for the storage account to save
     * the troubleshoot result.
     *
     * @param {string} parameters.storagePath The path to the blob to save the
     * troubleshoot result in.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTroubleshooting(resourceGroupName: string, networkWatcherName: string, parameters: models.TroubleshootingParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TroubleshootingResult>): void;
    getTroubleshooting(resourceGroupName: string, networkWatcherName: string, parameters: models.TroubleshootingParameters, callback: ServiceCallback<models.TroubleshootingResult>): void;

    /**
     * Get the last completed troubleshooting result on a specified resource
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the resource to query the
     * troubleshooting result.
     *
     * @param {string} parameters.targetResourceId The target resource ID to query
     * the troubleshooting result.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTroubleshootingResult(resourceGroupName: string, networkWatcherName: string, parameters: models.QueryTroubleshootingParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TroubleshootingResult>): void;
    getTroubleshootingResult(resourceGroupName: string, networkWatcherName: string, parameters: models.QueryTroubleshootingParameters, callback: ServiceCallback<models.TroubleshootingResult>): void;

    /**
     * Configures flow log on a specified resource.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the configuration of flow
     * log.
     *
     * @param {string} parameters.targetResourceId The ID of the resource to
     * configure for flow logging.
     *
     * @param {string} parameters.storageId ID of the storage account which is used
     * to store the flow log.
     *
     * @param {boolean} parameters.enabled Flag to enable/disable flow logging.
     *
     * @param {object} [parameters.retentionPolicy]
     *
     * @param {number} [parameters.retentionPolicy.days] Number of days to retain
     * flow log records.
     *
     * @param {boolean} [parameters.retentionPolicy.enabled] Flag to enable/disable
     * retention.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    setFlowLogConfiguration(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogInformation, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FlowLogInformation>): void;
    setFlowLogConfiguration(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogInformation, callback: ServiceCallback<models.FlowLogInformation>): void;

    /**
     * Queries status of flow log on a specified resource.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define a resource to query flow
     * log status.
     *
     * @param {string} parameters.targetResourceId The target resource where
     * getting the flow logging status.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getFlowLogStatus(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogStatusParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FlowLogInformation>): void;
    getFlowLogStatus(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogStatusParameters, callback: ServiceCallback<models.FlowLogInformation>): void;

    /**
     * Deletes the specified network watcher resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, networkWatcherName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, networkWatcherName: string, callback: ServiceCallback<void>): void;

    /**
     * Verify IP flow from the specified VM to a location given the currently
     * configured NSG rules.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the IP flow to be
     * verified.
     *
     * @param {string} parameters.targetResourceId The ID of the target resource to
     * perform next-hop on.
     *
     * @param {string} parameters.direction The direction of the packet represented
     * as a 5-tuple. Possible values include: 'Inbound', 'Outbound'
     *
     * @param {string} parameters.protocol Protocol to be verified on. Possible
     * values include: 'TCP', 'UDP'
     *
     * @param {string} parameters.localPort The local port. Acceptable values are a
     * single integer in the range (0-65535). Support for * for the source port,
     * which depends on the direction.
     *
     * @param {string} parameters.remotePort The remote port. Acceptable values are
     * a single integer in the range (0-65535). Support for * for the source port,
     * which depends on the direction.
     *
     * @param {string} parameters.localIPAddress The local IP address. Acceptable
     * values are valid IPv4 addresses.
     *
     * @param {string} parameters.remoteIPAddress The remote IP address. Acceptable
     * values are valid IPv4 addresses.
     *
     * @param {string} [parameters.targetNicResourceId] The NIC ID. (If VM has
     * multiple NICs and IP forwarding is enabled on any of them, then this
     * parameter must be specified. Otherwise optional).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginVerifyIPFlow(resourceGroupName: string, networkWatcherName: string, parameters: models.VerificationIPFlowParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VerificationIPFlowResult>): void;
    beginVerifyIPFlow(resourceGroupName: string, networkWatcherName: string, parameters: models.VerificationIPFlowParameters, callback: ServiceCallback<models.VerificationIPFlowResult>): void;

    /**
     * Gets the next hop from the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the source and destination
     * endpoint.
     *
     * @param {string} parameters.targetResourceId The resource identifier of the
     * target resource against which the action is to be performed.
     *
     * @param {string} parameters.sourceIPAddress The source IP address.
     *
     * @param {string} parameters.destinationIPAddress The destination IP address.
     *
     * @param {string} [parameters.targetNicResourceId] The NIC ID. (If VM has
     * multiple NICs and IP forwarding is enabled on any of the nics, then this
     * parameter must be specified. Otherwise optional).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginGetNextHop(resourceGroupName: string, networkWatcherName: string, parameters: models.NextHopParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NextHopResult>): void;
    beginGetNextHop(resourceGroupName: string, networkWatcherName: string, parameters: models.NextHopParameters, callback: ServiceCallback<models.NextHopResult>): void;

    /**
     * Gets the configured and effective security group rules on the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {object} parameters Parameters that define the VM to check security
     * groups for.
     *
     * @param {string} parameters.targetResourceId ID of the target VM.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginGetVMSecurityRules(resourceGroupName: string, networkWatcherName: string, parameters: models.SecurityGroupViewParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecurityGroupViewResult>): void;
    beginGetVMSecurityRules(resourceGroupName: string, networkWatcherName: string, parameters: models.SecurityGroupViewParameters, callback: ServiceCallback<models.SecurityGroupViewResult>): void;

    /**
     * Initiate troubleshooting on a specified resource
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the resource to
     * troubleshoot.
     *
     * @param {string} parameters.targetResourceId The target resource to
     * troubleshoot.
     *
     * @param {string} parameters.storageId The ID for the storage account to save
     * the troubleshoot result.
     *
     * @param {string} parameters.storagePath The path to the blob to save the
     * troubleshoot result in.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginGetTroubleshooting(resourceGroupName: string, networkWatcherName: string, parameters: models.TroubleshootingParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TroubleshootingResult>): void;
    beginGetTroubleshooting(resourceGroupName: string, networkWatcherName: string, parameters: models.TroubleshootingParameters, callback: ServiceCallback<models.TroubleshootingResult>): void;

    /**
     * Get the last completed troubleshooting result on a specified resource
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the resource to query the
     * troubleshooting result.
     *
     * @param {string} parameters.targetResourceId The target resource ID to query
     * the troubleshooting result.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginGetTroubleshootingResult(resourceGroupName: string, networkWatcherName: string, parameters: models.QueryTroubleshootingParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TroubleshootingResult>): void;
    beginGetTroubleshootingResult(resourceGroupName: string, networkWatcherName: string, parameters: models.QueryTroubleshootingParameters, callback: ServiceCallback<models.TroubleshootingResult>): void;

    /**
     * Configures flow log on a specified resource.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define the configuration of flow
     * log.
     *
     * @param {string} parameters.targetResourceId The ID of the resource to
     * configure for flow logging.
     *
     * @param {string} parameters.storageId ID of the storage account which is used
     * to store the flow log.
     *
     * @param {boolean} parameters.enabled Flag to enable/disable flow logging.
     *
     * @param {object} [parameters.retentionPolicy]
     *
     * @param {number} [parameters.retentionPolicy.days] Number of days to retain
     * flow log records.
     *
     * @param {boolean} [parameters.retentionPolicy.enabled] Flag to enable/disable
     * retention.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginSetFlowLogConfiguration(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogInformation, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FlowLogInformation>): void;
    beginSetFlowLogConfiguration(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogInformation, callback: ServiceCallback<models.FlowLogInformation>): void;

    /**
     * Queries status of flow log on a specified resource.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {object} parameters Parameters that define a resource to query flow
     * log status.
     *
     * @param {string} parameters.targetResourceId The target resource where
     * getting the flow logging status.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginGetFlowLogStatus(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogStatusParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FlowLogInformation>): void;
    beginGetFlowLogStatus(resourceGroupName: string, networkWatcherName: string, parameters: models.FlowLogStatusParameters, callback: ServiceCallback<models.FlowLogInformation>): void;
}

/**
 * @class
 * PacketCaptures
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface PacketCaptures {

    /**
     * Create and start a packet capture on the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} parameters Parameters that define the create packet capture
     * operation.
     *
     * @param {string} parameters.target The ID of the targeted resource, only VM
     * is currently supported.
     *
     * @param {number} [parameters.bytesToCapturePerPacket] Number of bytes
     * captured per packet, the remaining bytes are truncated.
     *
     * @param {number} [parameters.totalBytesPerSession] Maximum size of the
     * capture output.
     *
     * @param {number} [parameters.timeLimitInSeconds] Maximum duration of the
     * capture session in seconds.
     *
     * @param {object} parameters.storageLocation
     *
     * @param {string} [parameters.storageLocation.storageId] The ID of the storage
     * account to save the packet capture session. Required if no local file path
     * is provided.
     *
     * @param {string} [parameters.storageLocation.storagePath] The URI of the
     * storage path to save the packet capture. Must be a well-formed URI
     * describing the location to save the packet capture.
     *
     * @param {string} [parameters.storageLocation.filePath] A valid local path on
     * the targeting VM. Must include the name of the capture file (*.cap). For
     * linux virtual machine it must start with /var/captures. Required if no
     * storage ID is provided, otherwise optional.
     *
     * @param {array} [parameters.filters]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, parameters: models.PacketCapture, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PacketCaptureResult>): void;
    create(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, parameters: models.PacketCapture, callback: ServiceCallback<models.PacketCaptureResult>): void;

    /**
     * Gets a packet capture session by name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PacketCaptureResult>): void;
    get(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, callback: ServiceCallback<models.PacketCaptureResult>): void;

    /**
     * Deletes the specified packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, callback: ServiceCallback<void>): void;

    /**
     * Stops a specified packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    stop(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    stop(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, callback: ServiceCallback<void>): void;

    /**
     * Query the status of a running packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} packetCaptureName The name given to the packet capture
     * session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getStatus(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PacketCaptureQueryStatusResult>): void;
    getStatus(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, callback: ServiceCallback<models.PacketCaptureQueryStatusResult>): void;

    /**
     * Lists all packet capture sessions within the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, networkWatcherName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PacketCaptureListResult>): void;
    list(resourceGroupName: string, networkWatcherName: string, callback: ServiceCallback<models.PacketCaptureListResult>): void;

    /**
     * Create and start a packet capture on the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} parameters Parameters that define the create packet capture
     * operation.
     *
     * @param {string} parameters.target The ID of the targeted resource, only VM
     * is currently supported.
     *
     * @param {number} [parameters.bytesToCapturePerPacket] Number of bytes
     * captured per packet, the remaining bytes are truncated.
     *
     * @param {number} [parameters.totalBytesPerSession] Maximum size of the
     * capture output.
     *
     * @param {number} [parameters.timeLimitInSeconds] Maximum duration of the
     * capture session in seconds.
     *
     * @param {object} parameters.storageLocation
     *
     * @param {string} [parameters.storageLocation.storageId] The ID of the storage
     * account to save the packet capture session. Required if no local file path
     * is provided.
     *
     * @param {string} [parameters.storageLocation.storagePath] The URI of the
     * storage path to save the packet capture. Must be a well-formed URI
     * describing the location to save the packet capture.
     *
     * @param {string} [parameters.storageLocation.filePath] A valid local path on
     * the targeting VM. Must include the name of the capture file (*.cap). For
     * linux virtual machine it must start with /var/captures. Required if no
     * storage ID is provided, otherwise optional.
     *
     * @param {array} [parameters.filters]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreate(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, parameters: models.PacketCapture, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PacketCaptureResult>): void;
    beginCreate(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, parameters: models.PacketCapture, callback: ServiceCallback<models.PacketCaptureResult>): void;

    /**
     * Deletes the specified packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, callback: ServiceCallback<void>): void;

    /**
     * Stops a specified packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginStop(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginStop(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, callback: ServiceCallback<void>): void;

    /**
     * Query the status of a running packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} packetCaptureName The name given to the packet capture
     * session.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginGetStatus(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PacketCaptureQueryStatusResult>): void;
    beginGetStatus(resourceGroupName: string, networkWatcherName: string, packetCaptureName: string, callback: ServiceCallback<models.PacketCaptureQueryStatusResult>): void;
}

/**
 * @class
 * ExpressRouteCircuitAuthorizations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface ExpressRouteCircuitAuthorizations {

    /**
     * Deletes the specified authorization from the specified express route
     * circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, circuitName: string, authorizationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, circuitName: string, authorizationName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the specified authorization from the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, circuitName: string, authorizationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitAuthorization>): void;
    get(resourceGroupName: string, circuitName: string, authorizationName: string, callback: ServiceCallback<models.ExpressRouteCircuitAuthorization>): void;

    /**
     * Creates or updates an authorization in the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {object} authorizationParameters Parameters supplied to the create or
     * update express route circuit authorization operation.
     *
     * @param {string} [authorizationParameters.authorizationKey] The authorization
     * key.
     *
     * @param {string} [authorizationParameters.authorizationUseStatus]
     * AuthorizationUseStatus. Possible values are: 'Available' and 'InUse'.
     * Possible values include: 'Available', 'InUse'
     *
     * @param {string} [authorizationParameters.provisioningState] Gets the
     * provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [authorizationParameters.name] Gets name of the resource
     * that is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [authorizationParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, circuitName: string, authorizationName: string, authorizationParameters: models.ExpressRouteCircuitAuthorization, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitAuthorization>): void;
    createOrUpdate(resourceGroupName: string, circuitName: string, authorizationName: string, authorizationParameters: models.ExpressRouteCircuitAuthorization, callback: ServiceCallback<models.ExpressRouteCircuitAuthorization>): void;

    /**
     * Gets all authorizations in an express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, circuitName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationListResult>): void;
    list(resourceGroupName: string, circuitName: string, callback: ServiceCallback<models.AuthorizationListResult>): void;

    /**
     * Deletes the specified authorization from the specified express route
     * circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, circuitName: string, authorizationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, circuitName: string, authorizationName: string, callback: ServiceCallback<void>): void;

    /**
     * Creates or updates an authorization in the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {object} authorizationParameters Parameters supplied to the create or
     * update express route circuit authorization operation.
     *
     * @param {string} [authorizationParameters.authorizationKey] The authorization
     * key.
     *
     * @param {string} [authorizationParameters.authorizationUseStatus]
     * AuthorizationUseStatus. Possible values are: 'Available' and 'InUse'.
     * Possible values include: 'Available', 'InUse'
     *
     * @param {string} [authorizationParameters.provisioningState] Gets the
     * provisioning state of the public IP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @param {string} [authorizationParameters.name] Gets name of the resource
     * that is unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [authorizationParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, authorizationName: string, authorizationParameters: models.ExpressRouteCircuitAuthorization, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitAuthorization>): void;
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, authorizationName: string, authorizationParameters: models.ExpressRouteCircuitAuthorization, callback: ServiceCallback<models.ExpressRouteCircuitAuthorization>): void;

    /**
     * Gets all authorizations in an express route circuit.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.AuthorizationListResult>): void;
}

/**
 * @class
 * ExpressRouteCircuitPeerings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface ExpressRouteCircuitPeerings {

    /**
     * Deletes the specified peering from the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, circuitName: string, peeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, circuitName: string, peeringName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the specified authorization from the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, circuitName: string, peeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitPeering>): void;
    get(resourceGroupName: string, circuitName: string, peeringName: string, callback: ServiceCallback<models.ExpressRouteCircuitPeering>): void;

    /**
     * Creates or updates a peering in the specified express route circuits.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} peeringParameters Parameters supplied to the create or
     * update express route circuit peering operation.
     *
     * @param {string} [peeringParameters.peeringType] The PeeringType. Possible
     * values are: 'AzurePublicPeering', 'AzurePrivatePeering', and
     * 'MicrosoftPeering'. Possible values include: 'AzurePublicPeering',
     * 'AzurePrivatePeering', 'MicrosoftPeering'
     *
     * @param {string} [peeringParameters.state] The state of peering. Possible
     * values are: 'Disabled' and 'Enabled'. Possible values include: 'Disabled',
     * 'Enabled'
     *
     * @param {number} [peeringParameters.azureASN] The Azure ASN.
     *
     * @param {number} [peeringParameters.peerASN] The peer ASN.
     *
     * @param {string} [peeringParameters.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string} [peeringParameters.secondaryPeerAddressPrefix] The secondary
     * address prefix.
     *
     * @param {string} [peeringParameters.primaryAzurePort] The primary port.
     *
     * @param {string} [peeringParameters.secondaryAzurePort] The secondary port.
     *
     * @param {string} [peeringParameters.sharedKey] The shared key.
     *
     * @param {number} [peeringParameters.vlanId] The VLAN ID.
     *
     * @param {object} [peeringParameters.microsoftPeeringConfig] The Microsoft
     * peering configuration.
     *
     * @param {array}
     * [peeringParameters.microsoftPeeringConfig.advertisedPublicPrefixes] The
     * reference of AdvertisedPublicPrefixes.
     *
     * @param {string}
     * [peeringParameters.microsoftPeeringConfig.advertisedPublicPrefixesState]
     * AdvertisedPublicPrefixState of the Peering resource. Possible values are
     * 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
     * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
     * 'ValidationNeeded'
     *
     * @param {number} [peeringParameters.microsoftPeeringConfig.customerASN] The
     * CustomerASN of the peering.
     *
     * @param {string}
     * [peeringParameters.microsoftPeeringConfig.routingRegistryName] The
     * RoutingRegistryName of the configuration.
     *
     * @param {object} [peeringParameters.stats] Gets peering stats.
     *
     * @param {number} [peeringParameters.stats.primarybytesIn] Gets BytesIn of the
     * peering.
     *
     * @param {number} [peeringParameters.stats.primarybytesOut] Gets BytesOut of
     * the peering.
     *
     * @param {number} [peeringParameters.stats.secondarybytesIn] Gets BytesIn of
     * the peering.
     *
     * @param {number} [peeringParameters.stats.secondarybytesOut] Gets BytesOut of
     * the peering.
     *
     * @param {string} [peeringParameters.provisioningState] Gets the provisioning
     * state of the public IP resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [peeringParameters.gatewayManagerEtag] The GatewayManager
     * Etag.
     *
     * @param {string} [peeringParameters.lastModifiedBy] Gets whether the provider
     * or the customer last modified the peering.
     *
     * @param {object} [peeringParameters.routeFilter] The reference of the
     * RouteFilter resource.
     *
     * @param {array} [peeringParameters.routeFilter.rules] Collection of
     * RouteFilterRules contained within a route filter.
     *
     * @param {string} [peeringParameters.routeFilter.id] Resource ID.
     *
     * @param {string} [peeringParameters.routeFilter.location] Resource location.
     *
     * @param {object} [peeringParameters.routeFilter.tags] Resource tags.
     *
     * @param {string} [peeringParameters.name] Gets name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [peeringParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, circuitName: string, peeringName: string, peeringParameters: models.ExpressRouteCircuitPeering, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitPeering>): void;
    createOrUpdate(resourceGroupName: string, circuitName: string, peeringName: string, peeringParameters: models.ExpressRouteCircuitPeering, callback: ServiceCallback<models.ExpressRouteCircuitPeering>): void;

    /**
     * Gets all peerings in a specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, circuitName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitPeeringListResult>): void;
    list(resourceGroupName: string, circuitName: string, callback: ServiceCallback<models.ExpressRouteCircuitPeeringListResult>): void;

    /**
     * Deletes the specified peering from the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, circuitName: string, peeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, circuitName: string, peeringName: string, callback: ServiceCallback<void>): void;

    /**
     * Creates or updates a peering in the specified express route circuits.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} peeringParameters Parameters supplied to the create or
     * update express route circuit peering operation.
     *
     * @param {string} [peeringParameters.peeringType] The PeeringType. Possible
     * values are: 'AzurePublicPeering', 'AzurePrivatePeering', and
     * 'MicrosoftPeering'. Possible values include: 'AzurePublicPeering',
     * 'AzurePrivatePeering', 'MicrosoftPeering'
     *
     * @param {string} [peeringParameters.state] The state of peering. Possible
     * values are: 'Disabled' and 'Enabled'. Possible values include: 'Disabled',
     * 'Enabled'
     *
     * @param {number} [peeringParameters.azureASN] The Azure ASN.
     *
     * @param {number} [peeringParameters.peerASN] The peer ASN.
     *
     * @param {string} [peeringParameters.primaryPeerAddressPrefix] The primary
     * address prefix.
     *
     * @param {string} [peeringParameters.secondaryPeerAddressPrefix] The secondary
     * address prefix.
     *
     * @param {string} [peeringParameters.primaryAzurePort] The primary port.
     *
     * @param {string} [peeringParameters.secondaryAzurePort] The secondary port.
     *
     * @param {string} [peeringParameters.sharedKey] The shared key.
     *
     * @param {number} [peeringParameters.vlanId] The VLAN ID.
     *
     * @param {object} [peeringParameters.microsoftPeeringConfig] The Microsoft
     * peering configuration.
     *
     * @param {array}
     * [peeringParameters.microsoftPeeringConfig.advertisedPublicPrefixes] The
     * reference of AdvertisedPublicPrefixes.
     *
     * @param {string}
     * [peeringParameters.microsoftPeeringConfig.advertisedPublicPrefixesState]
     * AdvertisedPublicPrefixState of the Peering resource. Possible values are
     * 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
     * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
     * 'ValidationNeeded'
     *
     * @param {number} [peeringParameters.microsoftPeeringConfig.customerASN] The
     * CustomerASN of the peering.
     *
     * @param {string}
     * [peeringParameters.microsoftPeeringConfig.routingRegistryName] The
     * RoutingRegistryName of the configuration.
     *
     * @param {object} [peeringParameters.stats] Gets peering stats.
     *
     * @param {number} [peeringParameters.stats.primarybytesIn] Gets BytesIn of the
     * peering.
     *
     * @param {number} [peeringParameters.stats.primarybytesOut] Gets BytesOut of
     * the peering.
     *
     * @param {number} [peeringParameters.stats.secondarybytesIn] Gets BytesIn of
     * the peering.
     *
     * @param {number} [peeringParameters.stats.secondarybytesOut] Gets BytesOut of
     * the peering.
     *
     * @param {string} [peeringParameters.provisioningState] Gets the provisioning
     * state of the public IP resource. Possible values are: 'Updating',
     * 'Deleting', and 'Failed'.
     *
     * @param {string} [peeringParameters.gatewayManagerEtag] The GatewayManager
     * Etag.
     *
     * @param {string} [peeringParameters.lastModifiedBy] Gets whether the provider
     * or the customer last modified the peering.
     *
     * @param {object} [peeringParameters.routeFilter] The reference of the
     * RouteFilter resource.
     *
     * @param {array} [peeringParameters.routeFilter.rules] Collection of
     * RouteFilterRules contained within a route filter.
     *
     * @param {string} [peeringParameters.routeFilter.id] Resource ID.
     *
     * @param {string} [peeringParameters.routeFilter.location] Resource location.
     *
     * @param {object} [peeringParameters.routeFilter.tags] Resource tags.
     *
     * @param {string} [peeringParameters.name] Gets name of the resource that is
     * unique within a resource group. This name can be used to access the
     * resource.
     *
     * @param {string} [peeringParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, peeringName: string, peeringParameters: models.ExpressRouteCircuitPeering, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitPeering>): void;
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, peeringName: string, peeringParameters: models.ExpressRouteCircuitPeering, callback: ServiceCallback<models.ExpressRouteCircuitPeering>): void;

    /**
     * Gets all peerings in a specified express route circuit.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitPeeringListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ExpressRouteCircuitPeeringListResult>): void;
}

/**
 * @class
 * ExpressRouteCircuits
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface ExpressRouteCircuits {

    /**
     * Deletes the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, circuitName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, circuitName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets information about the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of express route circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, circuitName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuit>): void;
    get(resourceGroupName: string, circuitName: string, callback: ServiceCallback<models.ExpressRouteCircuit>): void;

    /**
     * Creates or updates an express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the circuit.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * express route circuit operation.
     *
     * @param {object} [parameters.sku] The SKU.
     *
     * @param {string} [parameters.sku.name] The name of the SKU.
     *
     * @param {string} [parameters.sku.tier] The tier of the SKU. Possible values
     * are 'Standard' and 'Premium'. Possible values include: 'Standard', 'Premium'
     *
     * @param {string} [parameters.sku.family] The family of the SKU. Possible
     * values are: 'UnlimitedData' and 'MeteredData'. Possible values include:
     * 'UnlimitedData', 'MeteredData'
     *
     * @param {boolean} [parameters.allowClassicOperations] Allow classic
     * operations
     *
     * @param {string} [parameters.circuitProvisioningState] The
     * CircuitProvisioningState state of the resource.
     *
     * @param {string} [parameters.serviceProviderProvisioningState] The
     * ServiceProviderProvisioningState state of the resource. Possible values are
     * 'NotProvisioned', 'Provisioning', 'Provisioned', and 'Deprovisioning'.
     * Possible values include: 'NotProvisioned', 'Provisioning', 'Provisioned',
     * 'Deprovisioning'
     *
     * @param {array} [parameters.authorizations] The list of authorizations.
     *
     * @param {array} [parameters.peerings] The list of peerings.
     *
     * @param {string} [parameters.serviceKey] The ServiceKey.
     *
     * @param {string} [parameters.serviceProviderNotes] The ServiceProviderNotes.
     *
     * @param {object} [parameters.serviceProviderProperties] The
     * ServiceProviderProperties.
     *
     * @param {string} [parameters.serviceProviderProperties.serviceProviderName]
     * The serviceProviderName.
     *
     * @param {string} [parameters.serviceProviderProperties.peeringLocation] The
     * peering location.
     *
     * @param {number} [parameters.serviceProviderProperties.bandwidthInMbps] The
     * BandwidthInMbps.
     *
     * @param {string} [parameters.provisioningState] Gets the provisioning state
     * of the public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.gatewayManagerEtag] The GatewayManager Etag.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, circuitName: string, parameters: models.ExpressRouteCircuit, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuit>): void;
    createOrUpdate(resourceGroupName: string, circuitName: string, parameters: models.ExpressRouteCircuit, callback: ServiceCallback<models.ExpressRouteCircuit>): void;

    /**
     * Gets the currently advertised ARP table associated with the express route
     * circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listArpTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitsArpTableListResult>): void;
    listArpTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCircuitsArpTableListResult>): void;

    /**
     * Gets the currently advertised routes table associated with the express route
     * circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listRoutesTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableListResult>): void;
    listRoutesTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableListResult>): void;

    /**
     * Gets the currently advertised routes table summary associated with the
     * express route circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listRoutesTableSummary(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableSummaryListResult>): void;
    listRoutesTableSummary(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableSummaryListResult>): void;

    /**
     * Gets all the stats from an express route circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getStats(resourceGroupName: string, circuitName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitStats>): void;
    getStats(resourceGroupName: string, circuitName: string, callback: ServiceCallback<models.ExpressRouteCircuitStats>): void;

    /**
     * Gets all stats from an express route circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getPeeringStats(resourceGroupName: string, circuitName: string, peeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitStats>): void;
    getPeeringStats(resourceGroupName: string, circuitName: string, peeringName: string, callback: ServiceCallback<models.ExpressRouteCircuitStats>): void;

    /**
     * Gets all the express route circuits in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitListResult>): void;
    list(resourceGroupName: string, callback: ServiceCallback<models.ExpressRouteCircuitListResult>): void;

    /**
     * Gets all the express route circuits in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitListResult>): void;
    listAll(callback: ServiceCallback<models.ExpressRouteCircuitListResult>): void;

    /**
     * Deletes the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, circuitName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, circuitName: string, callback: ServiceCallback<void>): void;

    /**
     * Creates or updates an express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the circuit.
     *
     * @param {object} parameters Parameters supplied to the create or update
     * express route circuit operation.
     *
     * @param {object} [parameters.sku] The SKU.
     *
     * @param {string} [parameters.sku.name] The name of the SKU.
     *
     * @param {string} [parameters.sku.tier] The tier of the SKU. Possible values
     * are 'Standard' and 'Premium'. Possible values include: 'Standard', 'Premium'
     *
     * @param {string} [parameters.sku.family] The family of the SKU. Possible
     * values are: 'UnlimitedData' and 'MeteredData'. Possible values include:
     * 'UnlimitedData', 'MeteredData'
     *
     * @param {boolean} [parameters.allowClassicOperations] Allow classic
     * operations
     *
     * @param {string} [parameters.circuitProvisioningState] The
     * CircuitProvisioningState state of the resource.
     *
     * @param {string} [parameters.serviceProviderProvisioningState] The
     * ServiceProviderProvisioningState state of the resource. Possible values are
     * 'NotProvisioned', 'Provisioning', 'Provisioned', and 'Deprovisioning'.
     * Possible values include: 'NotProvisioned', 'Provisioning', 'Provisioned',
     * 'Deprovisioning'
     *
     * @param {array} [parameters.authorizations] The list of authorizations.
     *
     * @param {array} [parameters.peerings] The list of peerings.
     *
     * @param {string} [parameters.serviceKey] The ServiceKey.
     *
     * @param {string} [parameters.serviceProviderNotes] The ServiceProviderNotes.
     *
     * @param {object} [parameters.serviceProviderProperties] The
     * ServiceProviderProperties.
     *
     * @param {string} [parameters.serviceProviderProperties.serviceProviderName]
     * The serviceProviderName.
     *
     * @param {string} [parameters.serviceProviderProperties.peeringLocation] The
     * peering location.
     *
     * @param {number} [parameters.serviceProviderProperties.bandwidthInMbps] The
     * BandwidthInMbps.
     *
     * @param {string} [parameters.provisioningState] Gets the provisioning state
     * of the public IP resource. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     *
     * @param {string} [parameters.gatewayManagerEtag] The GatewayManager Etag.
     *
     * @param {string} [parameters.id] Resource ID.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, parameters: models.ExpressRouteCircuit, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuit>): void;
    beginCreateOrUpdate(resourceGroupName: string, circuitName: string, parameters: models.ExpressRouteCircuit, callback: ServiceCallback<models.ExpressRouteCircuit>): void;

    /**
     * Gets the currently advertised ARP table associated with the express route
     * circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginListArpTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitsArpTableListResult>): void;
    beginListArpTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCircuitsArpTableListResult>): void;

    /**
     * Gets the currently advertised routes table associated with the express route
     * circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginListRoutesTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableListResult>): void;
    beginListRoutesTable(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableListResult>): void;

    /**
     * Gets the currently advertised routes table summary associated with the
     * express route circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginListRoutesTableSummary(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableSummaryListResult>): void;
    beginListRoutesTableSummary(resourceGroupName: string, circuitName: string, peeringName: string, devicePath: string, callback: ServiceCallback<models.ExpressRouteCircuitsRoutesTableSummaryListResult>): void;

    /**
     * Gets all the express route circuits in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ExpressRouteCircuitListResult>): void;

    /**
     * Gets all the express route circuits in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteCircuitListResult>): void;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.ExpressRouteCircuitListResult>): void;
}

/**
 * @class
 * ExpressRouteServiceProviders
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface ExpressRouteServiceProviders {

    /**
     * Gets all the available express route service providers.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteServiceProviderListResult>): void;
    list(callback: ServiceCallback<models.ExpressRouteServiceProviderListResult>): void;

    /**
     * Gets all the available express route service providers.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExpressRouteServiceProviderListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ExpressRouteServiceProviderListResult>): void;
}

/**
 * @class
 * RouteFilters
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface RouteFilters {

    /**
     * Deletes the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, routeFilterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, routeFilterName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expands referenced express route bgp
     * peering resources.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, routeFilterName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilter>): void;
    get(resourceGroupName: string, routeFilterName: string, callback: ServiceCallback<models.RouteFilter>): void;

    /**
     * Creates or updates a route filter in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} routeFilterParameters Parameters supplied to the create or
     * update route filter operation.
     *
     * @param {array} [routeFilterParameters.rules] Collection of RouteFilterRules
     * contained within a route filter.
     *
     * @param {string} [routeFilterParameters.id] Resource ID.
     *
     * @param {string} [routeFilterParameters.location] Resource location.
     *
     * @param {object} [routeFilterParameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.RouteFilter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilter>): void;
    createOrUpdate(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.RouteFilter, callback: ServiceCallback<models.RouteFilter>): void;

    /**
     * Updates a route filter in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} routeFilterParameters Parameters supplied to the update
     * route filter operation.
     *
     * @param {array} [routeFilterParameters.rules] Collection of RouteFilterRules
     * contained within a route filter.
     *
     * @param {object} [routeFilterParameters.tags] Resource tags.
     *
     * @param {string} [routeFilterParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.PatchRouteFilter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilter>): void;
    update(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.PatchRouteFilter, callback: ServiceCallback<models.RouteFilter>): void;

    /**
     * Gets all route filters in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterListResult>): void;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.RouteFilterListResult>): void;

    /**
     * Gets all route filters in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterListResult>): void;
    list(callback: ServiceCallback<models.RouteFilterListResult>): void;

    /**
     * Deletes the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, routeFilterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, routeFilterName: string, callback: ServiceCallback<void>): void;

    /**
     * Creates or updates a route filter in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} routeFilterParameters Parameters supplied to the create or
     * update route filter operation.
     *
     * @param {array} [routeFilterParameters.rules] Collection of RouteFilterRules
     * contained within a route filter.
     *
     * @param {string} [routeFilterParameters.id] Resource ID.
     *
     * @param {string} [routeFilterParameters.location] Resource location.
     *
     * @param {object} [routeFilterParameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.RouteFilter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilter>): void;
    beginCreateOrUpdate(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.RouteFilter, callback: ServiceCallback<models.RouteFilter>): void;

    /**
     * Updates a route filter in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} routeFilterParameters Parameters supplied to the update
     * route filter operation.
     *
     * @param {array} [routeFilterParameters.rules] Collection of RouteFilterRules
     * contained within a route filter.
     *
     * @param {object} [routeFilterParameters.tags] Resource tags.
     *
     * @param {string} [routeFilterParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginUpdate(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.PatchRouteFilter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilter>): void;
    beginUpdate(resourceGroupName: string, routeFilterName: string, routeFilterParameters: models.PatchRouteFilter, callback: ServiceCallback<models.RouteFilter>): void;

    /**
     * Gets all route filters in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterListResult>): void;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.RouteFilterListResult>): void;

    /**
     * Gets all route filters in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.RouteFilterListResult>): void;
}

/**
 * @class
 * RouteFilterRules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface RouteFilterRules {

    /**
     * Deletes the specified rule from a route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, routeFilterName: string, ruleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, routeFilterName: string, ruleName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the specified rule from a route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, routeFilterName: string, ruleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterRule>): void;
    get(resourceGroupName: string, routeFilterName: string, ruleName: string, callback: ServiceCallback<models.RouteFilterRule>): void;

    /**
     * Creates or updates a route in the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the route filter rule.
     *
     * @param {object} routeFilterRuleParameters Parameters supplied to the create
     * or update route filter rule operation.
     *
     * @param {string} routeFilterRuleParameters.access The access type of the
     * rule. Valid values are: 'Allow', 'Deny'. Possible values include: 'Allow',
     * 'Deny'
     *
     * @param {array} routeFilterRuleParameters.communities The collection for bgp
     * community values to filter on. e.g. ['12076:5010','12076:5020']
     *
     * @param {string} [routeFilterRuleParameters.location] Resource location.
     *
     * @param {object} [routeFilterRuleParameters.tags] Resource tags.
     *
     * @param {string} [routeFilterRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.RouteFilterRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterRule>): void;
    createOrUpdate(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.RouteFilterRule, callback: ServiceCallback<models.RouteFilterRule>): void;

    /**
     * Updates a route in the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the route filter rule.
     *
     * @param {object} routeFilterRuleParameters Parameters supplied to the update
     * route filter rule operation.
     *
     * @param {string} routeFilterRuleParameters.access The access type of the
     * rule. Valid values are: 'Allow', 'Deny'. Possible values include: 'Allow',
     * 'Deny'
     *
     * @param {array} routeFilterRuleParameters.communities The collection for bgp
     * community values to filter on. e.g. ['12076:5010','12076:5020']
     *
     * @param {object} [routeFilterRuleParameters.tags] Resource tags.
     *
     * @param {string} [routeFilterRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.PatchRouteFilterRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterRule>): void;
    update(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.PatchRouteFilterRule, callback: ServiceCallback<models.RouteFilterRule>): void;

    /**
     * Gets all RouteFilterRules in a route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByRouteFilter(resourceGroupName: string, routeFilterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterRuleListResult>): void;
    listByRouteFilter(resourceGroupName: string, routeFilterName: string, callback: ServiceCallback<models.RouteFilterRuleListResult>): void;

    /**
     * Deletes the specified rule from a route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, routeFilterName: string, ruleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, routeFilterName: string, ruleName: string, callback: ServiceCallback<void>): void;

    /**
     * Creates or updates a route in the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the route filter rule.
     *
     * @param {object} routeFilterRuleParameters Parameters supplied to the create
     * or update route filter rule operation.
     *
     * @param {string} routeFilterRuleParameters.access The access type of the
     * rule. Valid values are: 'Allow', 'Deny'. Possible values include: 'Allow',
     * 'Deny'
     *
     * @param {array} routeFilterRuleParameters.communities The collection for bgp
     * community values to filter on. e.g. ['12076:5010','12076:5020']
     *
     * @param {string} [routeFilterRuleParameters.location] Resource location.
     *
     * @param {object} [routeFilterRuleParameters.tags] Resource tags.
     *
     * @param {string} [routeFilterRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.RouteFilterRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterRule>): void;
    beginCreateOrUpdate(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.RouteFilterRule, callback: ServiceCallback<models.RouteFilterRule>): void;

    /**
     * Updates a route in the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the route filter rule.
     *
     * @param {object} routeFilterRuleParameters Parameters supplied to the update
     * route filter rule operation.
     *
     * @param {string} routeFilterRuleParameters.access The access type of the
     * rule. Valid values are: 'Allow', 'Deny'. Possible values include: 'Allow',
     * 'Deny'
     *
     * @param {array} routeFilterRuleParameters.communities The collection for bgp
     * community values to filter on. e.g. ['12076:5010','12076:5020']
     *
     * @param {object} [routeFilterRuleParameters.tags] Resource tags.
     *
     * @param {string} [routeFilterRuleParameters.id] Resource ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginUpdate(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.PatchRouteFilterRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterRule>): void;
    beginUpdate(resourceGroupName: string, routeFilterName: string, ruleName: string, routeFilterRuleParameters: models.PatchRouteFilterRule, callback: ServiceCallback<models.RouteFilterRule>): void;

    /**
     * Gets all RouteFilterRules in a route filter.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByRouteFilterNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RouteFilterRuleListResult>): void;
    listByRouteFilterNext(nextPageLink: string, callback: ServiceCallback<models.RouteFilterRuleListResult>): void;
}

/**
 * @class
 * BgpServiceCommunities
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NetworkManagementClient.
 */
export interface BgpServiceCommunities {

    /**
     * Gets all the available bgp service communities.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BgpServiceCommunityListResult>): void;
    list(callback: ServiceCallback<models.BgpServiceCommunityListResult>): void;

    /**
     * Gets all the available bgp service communities.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BgpServiceCommunityListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.BgpServiceCommunityListResult>): void;
}

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ExpressRouteCircuitAuthorization class.
 * @constructor
 * Authorization in an ExpressRouteCircuit resource.
 *
 * @member {string} [authorizationKey] The authorization key.
 *
 * @member {string} [authorizationUseStatus] AuthorizationUseStatus. Possible
 * values are: 'Available' and 'InUse'. Possible values include: 'Available',
 * 'InUse'
 *
 * @member {string} [provisioningState] Gets the provisioning state of the
 * public IP resource. Possible values are: 'Updating', 'Deleting', and
 * 'Failed'.
 *
 * @member {string} [name] Gets name of the resource that is unique within a
 * resource group. This name can be used to access the resource.
 *
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated.
 *
 */
function ExpressRouteCircuitAuthorization() {
  ExpressRouteCircuitAuthorization['super_'].call(this);
}

util.inherits(ExpressRouteCircuitAuthorization, models['SubResource']);

/**
 * Defines the metadata of ExpressRouteCircuitAuthorization
 *
 * @returns {object} metadata of ExpressRouteCircuitAuthorization
 *
 */
ExpressRouteCircuitAuthorization.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ExpressRouteCircuitAuthorization',
    type: {
      name: 'Composite',
      className: 'ExpressRouteCircuitAuthorization',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        authorizationKey: {
          required: false,
          serializedName: 'properties.authorizationKey',
          type: {
            name: 'String'
          }
        },
        authorizationUseStatus: {
          required: false,
          serializedName: 'properties.authorizationUseStatus',
          type: {
            name: 'String'
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        etag: {
          required: false,
          readOnly: true,
          serializedName: 'etag',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = ExpressRouteCircuitAuthorization;

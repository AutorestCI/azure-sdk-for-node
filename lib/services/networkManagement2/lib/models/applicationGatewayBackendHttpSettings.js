/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ApplicationGatewayBackendHttpSettings class.
 * @constructor
 * Backend address pool settings of an application gateway.
 *
 * @member {number} [port] Port
 *
 * @member {string} [protocol] Protocol. Possible values are: 'Http' and
 * 'Https'. Possible values include: 'Http', 'Https'
 *
 * @member {string} [cookieBasedAffinity] Cookie based affinity. Possible
 * values are: 'Enabled' and 'Disabled'. Possible values include: 'Enabled',
 * 'Disabled'
 *
 * @member {number} [requestTimeout] Request timeout in seconds. Application
 * Gateway will fail the request if response is not received within
 * RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
 *
 * @member {object} [probe] Probe resource of an application gateway.
 *
 * @member {string} [probe.id] Resource ID.
 *
 * @member {array} [authenticationCertificates] Array of references to
 * application gateway authentication certificates.
 *
 * @member {string} [provisioningState] Provisioning state of the backend http
 * settings resource. Possible values are: 'Updating', 'Deleting', and
 * 'Failed'.
 *
 * @member {string} [name] Name of the resource that is unique within a
 * resource group. This name can be used to access the resource.
 *
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated.
 *
 */
function ApplicationGatewayBackendHttpSettings() {
  ApplicationGatewayBackendHttpSettings['super_'].call(this);
}

util.inherits(ApplicationGatewayBackendHttpSettings, models['SubResource']);

/**
 * Defines the metadata of ApplicationGatewayBackendHttpSettings
 *
 * @returns {object} metadata of ApplicationGatewayBackendHttpSettings
 *
 */
ApplicationGatewayBackendHttpSettings.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ApplicationGatewayBackendHttpSettings',
    type: {
      name: 'Composite',
      className: 'ApplicationGatewayBackendHttpSettings',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        port: {
          required: false,
          serializedName: 'properties.port',
          type: {
            name: 'Number'
          }
        },
        protocol: {
          required: false,
          serializedName: 'properties.protocol',
          type: {
            name: 'String'
          }
        },
        cookieBasedAffinity: {
          required: false,
          serializedName: 'properties.cookieBasedAffinity',
          type: {
            name: 'String'
          }
        },
        requestTimeout: {
          required: false,
          serializedName: 'properties.requestTimeout',
          type: {
            name: 'Number'
          }
        },
        probe: {
          required: false,
          serializedName: 'properties.probe',
          type: {
            name: 'Composite',
            className: 'SubResource'
          }
        },
        authenticationCertificates: {
          required: false,
          serializedName: 'properties.authenticationCertificates',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'SubResourceElementType',
                type: {
                  name: 'Composite',
                  className: 'SubResource'
                }
            }
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        etag: {
          required: false,
          serializedName: 'etag',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = ApplicationGatewayBackendHttpSettings;
